<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://matthewrocklin.com</id>
  <title>Matthew Rocklin's Working Notes</title>
  <updated>2023-01-01T01:17:11.925229+00:00</updated>
  <link href="https://matthewrocklin.com"/>
  <link href="https://matthewrocklin.com/meta/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>https://matthewrocklin.com/programming/shared-abstractions/</id>
    <title>Dictionaries v. Objects</title>
    <updated>2013-09-02T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="dictionaries-v-objects"&gt;

&lt;p&gt;&lt;em&gt;a story of shared abstractions&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Shannon Behrens recently published a &lt;a class="reference external" href="http://jjinux.blogspot.com/2013/08/python-dicts-vs-classes.html"&gt;brief post&lt;/a&gt; on the use of dictionaries and objects to store named data.  He raised the following question:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;At what point do we transition from core data representations like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dicts&lt;/span&gt;&lt;/code&gt; to custom data representations with custom classes?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Choices in data representation interest me quite a bit.  I think that the mechanisms we choose to store and share data strongly impact the longevity of the code that we write.&lt;/p&gt;
&lt;p&gt;Let’s borrow Shannon’s book example to compare two common options of data representation&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; Book object &amp;quot;&lt;/span&gt;                                 &lt;span class="s2"&gt;&amp;quot; Plain Dictionary &amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isbn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;isbn&lt;/span&gt;
                                                &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Neil Gaiman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;                        &lt;span class="s2"&gt;&amp;quot;authors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Neil Gaiman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;American Gods&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                        &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;American Gods&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;9780062113450&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        &lt;span class="s2"&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9780062113450&amp;quot;&lt;/span&gt;
                                                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Shannon advocates that you should “Keep it Simple” (right) for simple data structures but that, once things become more complex, you should transition to an object (left).&lt;/p&gt;
&lt;p&gt;I think that most Python programmers would agree with this sentiment.  It’s unclear (and thus interesting) exactly when this transition occurs though.  Personally I use core data structures (like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt;) to represent almost all of my data.  I create new classes very rarely.  I follow this practice because I believe in the principle of shared abstractions.  I’ll explain what I mean in a moment.&lt;/p&gt;
&lt;section id="advantages-of-objects"&gt;
&lt;h2&gt;Advantages of Objects&lt;/h2&gt;
&lt;p&gt;To start, lets state some of the virtues of objects (this is a very incomplete list.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Historically they’re just more commonly used for complex data.  It’s important to maintain coding standards that existing programmers find comfortable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The attribute syntax is a lot nicer.  Compare the following syntax to access an attribute:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;authors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="c1"&gt;# 11 characters to get attribute, 4 of them awkward to type&lt;/span&gt;
&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;         &lt;span class="c1"&gt;#  8 characters to get attribute, all of them common&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can add functionality/methods to the objects in a controlled namespace.  For example&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;clearly&lt;/span&gt; &lt;span class="n"&gt;belongs&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;
&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="n"&gt;conflicts&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;standard&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The attribute syntax note is convenient but not a game-changer.  The ability to associate a set of functions with the object (and reuse these functions on inherited classes) is really where objects shine.  To emulate this behavior with core data structures you need to respect namespaces&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bookpy&lt;/span&gt;
&lt;span class="n"&gt;bookpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And culturally many of us (myself included) are pretty bad at this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="advantages-of-dicts"&gt;
&lt;h2&gt;Advantages of Dicts&lt;/h2&gt;
&lt;p&gt;There are some small advantages to using dicts like the following&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Literal syntax, we can jump right in and write down dicts without setting up a class first.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Efficient implementation (dicts are &lt;em&gt;really&lt;/em&gt; fast)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But, like the object attribute syntax these are merely convenient.&lt;/p&gt;
&lt;p&gt;The major reason to prefer core data structures is that they are an abstraction shared among all Python programmers.  As a result you can depend on standard code to &lt;em&gt;just work&lt;/em&gt; on your data.&lt;/p&gt;
&lt;p&gt;For example we can serialize our data into JSON if, for example, we wanted to serialize it and send it over the internet.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;authors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Neil Gaiman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;American Gods&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;isbn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9780062113450&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;{&amp;quot;title&amp;quot;: &amp;quot;American Gods&amp;quot;, &amp;quot;isbn&amp;quot;: &amp;quot;9780062113450&amp;quot;, &amp;quot;authors&amp;quot;: [&amp;quot;Neil Gaiman&amp;quot;]}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;json&lt;/span&gt;&lt;/code&gt; library fails to transform our &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;book&lt;/span&gt;&lt;/code&gt; object however.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Neil Gaiman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;American Gods&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9780062113450&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;TypeError: &amp;lt;__main__.Book object at 0x10e4410&amp;gt; is not JSON serializable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is to be expected.  The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;json&lt;/span&gt;&lt;/code&gt; library developers have not seen our Book class.  No one has but us.&lt;/p&gt;
&lt;p&gt;While we may not think we need &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;json&lt;/span&gt;&lt;/code&gt; encoding it’s likely that if our project succeeds then someone will want to send our objects over the internet.  The decision to make a custom class shuts our project off from the rest of the development ecosystem.&lt;/p&gt;
&lt;p&gt;Custom classes inhibit interoperation with other libraries.  This limits growth out to unanticipated applications.  This is particularly tragic because our field thrives on connecting isolated components.  Shared abstractions serve as the connection links, like the regular bumps and divots in LEGO pieces.  Shared abstractions allow us to connect cool modules to create novel cool projects with ease.  Otherwise we’re stuck hacking together missing technology (like a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Book.write_json&lt;/span&gt;&lt;/code&gt; method) when perfectly adequate solutions (like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;json.dumps&lt;/span&gt;&lt;/code&gt;) already exist.&lt;/p&gt;
&lt;p&gt;This example isn’t restricted to JSON encoding, in general we’re going to have to hack something together every time we want the Book objects to interact with foreign code.  This problem compounds as we begin to rely on more and more external projects.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="custom-shared-abstractions"&gt;
&lt;h2&gt;Custom Shared Abstractions&lt;/h2&gt;
&lt;p&gt;Sometimes building custom classes is worth it.  This is certainly the case when you have a large developer base that can all agree on exactly the interface they want to use.  LEGO piece bumps aren’t the right fit for everyone.  If you have a large community you can establish other cool interfaces (like Lincoln Logs or Tinker Toys) but only if you have sufficient market power to do so.  No one buys the off-brand LEGOs that don’t quite fit.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy.ndarray&lt;/span&gt;&lt;/code&gt; object is a perfect example of a custom class that has become a shared abstraction for the entire scientific computing ecosystem.  Object orientation provided convenient syntax and intelligent method handling of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy.ndarrays&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numpy.matrix&lt;/span&gt;&lt;/code&gt;.  I think that these features were key to this module’s wide adoption/success and a clear win for the object oriented crowd.&lt;/p&gt;
&lt;p&gt;In short, I think that new classes are really awesome but only in really rare cases.  They should be used sparingly.  If you’re developing for the Librarian Developers of the World then by all means, make an awesome, fully featured book class; otherwise try sticking with core data structures.  You’ll be happy later on as you leverage standard libraries for unanticipated applications.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="best-of-both-worlds-or-fancy-solutions"&gt;
&lt;h2&gt;Best of Both Worlds (or, Fancy Solutions)&lt;/h2&gt;
&lt;p&gt;You can implement shared abstractions on top of custom classes.  For example you can implement the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iterable&lt;/span&gt;&lt;/code&gt; abstraction by implementing an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__iter__&lt;/span&gt;&lt;/code&gt; method on your class, allowing other foreign modules to leverage your custom data type without any trouble.  The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;namedtuple&lt;/span&gt;&lt;/code&gt; function in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;collections&lt;/span&gt;&lt;/code&gt; might be a good fit for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;book&lt;/span&gt;&lt;/code&gt; application above.&lt;/p&gt;
&lt;p&gt;Also, it’s worth noting that JavaScript handles this problem in a curious way.  Objects and dictionaries are equivalent.  It’s an interesting direction and something I suspect we could hack together in Python as well.&lt;/p&gt;
&lt;p&gt;Finally, most objects in Python actually &lt;em&gt;are&lt;/em&gt; just dictionaries.  You can always operate on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;object.__dict__&lt;/span&gt;&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/programming/shared-abstractions/" rel="alternate"/>
    <summary>a story of shared abstractions</summary>
    <published>2013-09-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/programming/write-tests/</id>
    <title>Write Tests</title>
    <updated>2016-02-08T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="write-tests"&gt;

&lt;p&gt;Tests are important for community driven open source software.
This post contains brief reasons why you should test your code, particularly if
you submit changes to existing open source projects.&lt;/p&gt;
&lt;section id="why-we-don-t-test"&gt;
&lt;h2&gt;Why we don’t test.&lt;/h2&gt;
&lt;p&gt;A test is an extra piece of code to verify the correctness of the code we
actually care about.&lt;/p&gt;
&lt;p&gt;If we know that our function works then the test code is extraneous.  Because
many developers today verify code correctness through interactive sessions,
adding tests after-the-fact seems like a chore that can be skipped if time
pressure is on.  Testing feels like flossing your teeth; only theoretically
important.&lt;/p&gt;
&lt;p&gt;This is a valid point of view. There are several ways to verify code
correctness and interactive sessions may be sufficient in some cases,
especially if your job is to write one-off scripts or notebooks for quick
analysis.&lt;/p&gt;
&lt;p&gt;However, if you want to contribute to long term software that involves many
people collaborating over long periods of time then your tests become more
important.  Your tests will likely outlive your source-code several times over.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-we-test"&gt;
&lt;h2&gt;Why we test&lt;/h2&gt;
&lt;p&gt;Usually we motivate testing by emphasizing the importance of verifying
present-day correctness, similar to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Double-entry_bookkeeping_system"&gt;double entry
bookkeeping&lt;/a&gt;.
Verifying correctness &lt;em&gt;is&lt;/em&gt; valuable, but there are several other reasons that
are just as valuable.&lt;/p&gt;
&lt;section id="establish-interfaces"&gt;
&lt;h3&gt;Establish interfaces&lt;/h3&gt;
&lt;p&gt;Write basic interface tests before you write code.  This formally establishes
and enforces the goals of your work and forces you to think at a high-level
before you dive into low-level details.&lt;/p&gt;
&lt;p&gt;It’s hard to abstain from diving into the guts of a new problem right away.
This requires mental discipline.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="communicate-with-colleagues"&gt;
&lt;h3&gt;Communicate with colleagues&lt;/h3&gt;
&lt;p&gt;You can share these high-level tests with colleagues to make sure everyone is
on the same page before writing a solution.  It’s far easier to understand a
function from its tests than from its source code.  Providing clean tests is a
great courtesy to your reviewers and co-workers.  This sharing process can
happen before you invest time in writing source code.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="reduce-maintenance-burden"&gt;
&lt;h3&gt;Reduce maintenance burden&lt;/h3&gt;
&lt;p&gt;If you spend ten hours developing a contribution to a project, the project
maintainers will likely spend forty hours maintaining that contribution in the
future, especially if it is a new feature that expands the project scope rather
than a bug fix.  Tests dramatically help to reduce maintenance burden.  We
emphasize this in the following two points.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="guard-against-future-developers"&gt;
&lt;h3&gt;Guard against future developers&lt;/h3&gt;
&lt;p&gt;Future developers will change your code.  They will not perfectly understand
your original intention and so will introduce bugs.  Your tests guard against
these well-meaning but imperfectly informed future developers.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="guard-against-complex-interactions"&gt;
&lt;h3&gt;Guard against complex interactions&lt;/h3&gt;
&lt;p&gt;In a complex project your function likely depends on hundreds of other
functions and interfaces throughout the project.  These change all the time.
Tests raise a red flag whenever a proposed change would alter your
contribution.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="enable-refactoring"&gt;
&lt;h3&gt;Enable refactoring&lt;/h3&gt;
&lt;p&gt;Software projects occasionally undergo significant internal changes.  This
often requires a small number of developers to drastically change all parts of
the code at once.  This is really only feasible if all relevant parts of the
code have decent code coverage.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a class="reference external" href="https://twitter.com/minrk/status/505111560394530816"&gt;twitter quote&lt;/a&gt;
from a primary Jupyter developer:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I never appreciate tests or dread their absence more than during a refactor.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;–&amp;#64;minrk&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ensure-current-correctness"&gt;
&lt;h3&gt;Ensure current correctness&lt;/h3&gt;
&lt;p&gt;Tests ensure that the code you’ve just written is correct today for the use
cases you’ve thought about.  When you write nice tests you always find flaws in
your existing solution that you wouldn’t have found otherwise.&lt;/p&gt;
&lt;p&gt;This is the common argument usually presented in defense of testing.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="think-adversarially"&gt;
&lt;h3&gt;Think adversarially&lt;/h3&gt;
&lt;p&gt;Writing tests is a good time to think adversarially about your problem.  What
happens if I give a very large input here?  How about a negative number?  Oh,
what happens if the user enters a value of the wrong type; do they get a
sensible error message?  We rarely think about these issues when solving our
initial problem but they are important, especially if our code reaches
end-users.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="force-good-design"&gt;
&lt;h3&gt;Force good design&lt;/h3&gt;
&lt;p&gt;Easy-to-test code separates application logic from hard-to-test components like
databases or network connections.  The burden of testing encourages us to
separate complex code from complex infrastructure so that we can test each
component in isolation.  This separation promotes future code health as well as
improved testing.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="testing-is-easy"&gt;
&lt;h3&gt;Testing is easy&lt;/h3&gt;
&lt;p&gt;A single test that exercises the common case just once probably catches 70% of
the failures.  This probably isn’t sufficient for most open-source projects but
it’s comforting to know that your first few steps into testing are always the
most productive.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="testing-is-hard"&gt;
&lt;h3&gt;Testing is hard&lt;/h3&gt;
&lt;p&gt;Good test suites take time and thought but they’re very important.  Defining
the correct behavior for a complex system is just as worthwhile as designing
its implementation.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="interactive-feedback"&gt;
&lt;h3&gt;Interactive feedback&lt;/h3&gt;
&lt;p&gt;Verifying correctness by interactive sessions can take a long time for complex
functions.  We restart our interpreter and reenter the same setup code
repeatedly.  A quick test automates this process, often providing feedback in
less than a second.  Subsecond tests, combined with tools like
&lt;a class="reference external" href="https://pypi.python.org/pypi/conttest"&gt;conttest&lt;/a&gt; provide continuous feedback
as we write and save code.  Continuous feedback during coding is incredibly
productive.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="social-pressure"&gt;
&lt;h3&gt;Social pressure&lt;/h3&gt;
&lt;p&gt;Finally, there is social pressure.  Few mature open source software projects
will accept untested contributions and it is generally considered a faux pas to
submit a contribution without tests.  If you have to write tests then you might
as well write them first so that they can help you during development.&lt;/p&gt;
&lt;p&gt;Professional tip: if you interview for a job and have to do a programming
exercise, start with a few simple tests.  This helps you and the interviewer
agree on the statement of the problem, gives you rapid interactive feedback in
a stressful situation, and gives you an air of professionalism.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="acknowledgments"&gt;
&lt;h3&gt;Acknowledgments&lt;/h3&gt;
&lt;p&gt;This post is thanks in part to discussions with
&lt;a class="reference external" href="https://github.com/martindurant"&gt;Martin Durant&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/programming/write-tests/" rel="alternate"/>
    <summary>Tests are important for community driven open source software.
This post contains brief reasons why you should test your code, particularly if
you submit changes to existing open source projects.</summary>
    <published>2016-02-08T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/programming/biased-benchmarks/</id>
    <title>Biased Benchmarks</title>
    <updated>2017-03-09T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="biased-benchmarks"&gt;

&lt;p&gt;&lt;em&gt;honesty is hard&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This work is supported by &lt;a class="reference external" href="http://continuum.io"&gt;Continuum Analytics&lt;/a&gt;
the &lt;a class="reference external" href="http://www.darpa.mil/program/XDATA"&gt;XDATA Program&lt;/a&gt;
and the Data Driven Discovery Initiative from the &lt;a class="reference external" href="https://www.moore.org/"&gt;Moore
Foundation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Performing benchmarks to compare software is surprisingly difficult to do
fairly, even assuming the best intentions of the author.  Technical developers
can fall victim to a few natural human failings:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;We judge other projects by our own objectives rather than the objectives under which that project was developed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We fail to use other projects with the same expertise that we have for our own&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We naturally gravitate towards cases at which our project excels&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We improve our software during the benchmarking process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We don’t release negative results&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We discuss each of these failings in the context of current benchmarks I’m
working on comparing Dask and Spark Dataframes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Last week I started comparing performance between Dask Dataframes (a project
that I maintain) and Spark Dataframes (the current standard).  My initial
results showed that Dask.dataframes were overall &lt;em&gt;much&lt;/em&gt; faster, somewhere like
5x.&lt;/p&gt;
&lt;p&gt;These results were wrong.  They weren’t wrong in a factual sense, and the
experiments that I ran were clear and reproducible, but there was so much bias
in how I selected, set up, and ran those experiments that the end result was
misleading.  After checking results myself and then having other experts come
in and check my results I now see much more sensible numbers.  At the moment
both projects are within a factor of two most of the time, with some
interesting exceptions either way.&lt;/p&gt;
&lt;p&gt;This blogpost outlines the ways in which library authors can fool themselves
when performing benchmarks, using my recent experience as an anecdote.  I hope
that this encourages authors to check themselves, and encourages readers to be
more critical of numbers that they see in the future.&lt;/p&gt;
&lt;p&gt;This problem exists as well in academic research.  For a pop-science rendition
I recommend &lt;a class="reference external" href="http://www.npr.org/sections/money/2016/01/15/463237871/episode-677-the-experiment-experiment"&gt;“The Experiment Experiment” on the Planet Money
Podcast&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="skewed-objectives"&gt;
&lt;h2&gt;Skewed Objectives&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Feature X is so important.  I wonder how the competition fares?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Every project is developed with different applications in mind and so has
different strengths and weaknesses.  If we approach a benchmark caring only
about our original objectives and dismissing the objectives of the other
projects then we’ll very likely trick ourselves.&lt;/p&gt;
&lt;p&gt;For example consider reading CSV files.  Dask’s CSV reader is based off of
Pandas’ CSV reader, which was the target of great effort and love; this is
because CSV was so important to the finance community where Pandas grew up.
Spark’s CSV solution is less awesome, but that’s less about the quality of
Spark and more a statement about how Spark users tend not to use CSV.  When
they use text-based formats they’re much more likely to use line-delimited
JSON, which is typical in Spark’s common use cases (web diagnostics, click
logs, and so on).  Pandas/Dask came from the scientific and finance worlds where CSV
is king while Spark came from the web world where JSON reigns.&lt;/p&gt;
&lt;p&gt;Conversely, Dask.dataframe hasn’t bothered to hook up the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pandas.read_json&lt;/span&gt;&lt;/code&gt;
function to Dask.dataframe yet.  Surprisingly it rarely comes up.  Both
projects can correctly say that the other project’s solution to what they
consider the standard text-based file format is less-than-awesome.  Comparing
performance here either way will likely lead to misguided conclusions.&lt;/p&gt;
&lt;p&gt;So when benchmarking data ingestion maybe we look around a bit, see that both
claim to support Parquet well, and use that as the basis for comparison.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="skewed-experience"&gt;
&lt;h2&gt;Skewed Experience&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Whoa, this other project has a lot of configuration parameters!  Let’s just use
the defaults.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Software is often easy to set up, but often requires experience to set up
optimally.  Authors are naturally more adept at setting up their own software
than the software of their competition.&lt;/p&gt;
&lt;p&gt;My original (and flawed) solution to this was to “just use the defaults” on
both projects.  Given my inability to tune Spark (there are several dozen
parameters) I decided to also not tune Dask and run under default settings.  I
figured that this would be a good benchmark not only of the software, but also
on choices for sane defaults, which is a good design principle in itself.&lt;/p&gt;
&lt;p&gt;This failed spectacularly because I was making unconscious decisions like the
size of machines that I was using for the experiment, CPU/memory ratios, and so on.
It turns out that Spark’s defaults are optimized for &lt;em&gt;very small machines&lt;/em&gt; (or
more likely, small YARN containers) and use only 1GB of memory per executor by
default while Dask is typically run on larger boxes or has the full use of a
single machine in a single shared-memory process.  My standard cluster
configurations were biased towards Dask before I even considered running a
benchmark.&lt;/p&gt;
&lt;p&gt;Similarly the APIs of software projects are complex and for any given problem
there is often both a fast way and a general-but-slow way.  Authors naturally
choose the fast way on their own system but inadvertently choose the general
way that comes up first when reading documentation for the other project.  It
often takes months of hands-on experience to understand a project well enough
to definitely say that you’re not doing things in a dumb way.&lt;/p&gt;
&lt;p&gt;In both cases I think the only solution is to collaborate with someone that
primarily uses the other system.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="preference-towards-strengths"&gt;
&lt;h2&gt;Preference towards strengths&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Oh hey, we’re doing &lt;strong&gt;really&lt;/strong&gt; well here.  This is great!  Let’s dive into this a
bit more.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It feels great to see your project doing well.  This emotional pleasure
response is powerful.  It’s only natural that we pursue that feeling more,
exploring different aspects of it.  This can skew our writing as well.  We’ll
find that we’ve decided to devote 80% of the text to what originally seemed
like a small set of features, but which now seems like &lt;em&gt;the main point&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It’s important that we define a set of things we’re going to study ahead of
time and then stick to those things.  When we run into cases where our project
fails we should take that as an opportunity to raise an issue for future
(though not current) development.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tuning-during-experimentation"&gt;
&lt;h2&gt;Tuning during experimentation&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Oh, I know why this is slow.  One sec, let me change something in the code.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I’m doing this right now.  Dask dataframe shuffles are generally slower than
Spark dataframe shuffles.  On numeric data this used to be around a 2x
difference, now it’s more like a 1.2x difference (at least on my current
problem and machine).  Overall this is great, seeing that another project was
beating Dask motivated me to dive in &lt;a class="reference external" href="https://github.com/dask/distributed/issues/932"&gt;(see dask/distributed
#932)&lt;/a&gt; and this will result in
a better experience for users in the future.  As a developer this is also how I
operate.  I define a benchmark, profile my code, identify bottlenecks, and
optimize.  Business as usual.&lt;/p&gt;
&lt;p&gt;However as an author of a comparative benchmark this is also somewhat dishonest;
I’m not giving the Spark developers the same opportunity to find and fix
similar performance issues in their software before I publish my results.  I’m
also giving a biased picture to my readers.  I’ve made all of the pieces that
I’m going to show off fast while neglecting the others.  Picking benchmarks,
optimizing the project to make them fast, and then publishing those results
gives the incorrect impression that the entire project has been optimized to
that level.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="omission"&gt;
&lt;h2&gt;Omission&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;So, this didn’t go as planned.  Let’s wait a few months until the next release.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is no motivation to publish negative results.  Unless of course you’ve
just written a blogpost announcing that you plan to release benchmarks in the
near future.  Then you’re really forced to release numbers, even if they’re
mixed.&lt;/p&gt;
&lt;p&gt;That’s ok. Mixed numbers can be informative.  They build trust and
community.  And we all talk about open source community driven software, so
these should be welcome.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="straight-up-bias"&gt;
&lt;h2&gt;Straight up bias&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Look, we’re not in grad-school any more.  We’ve got to convince companies to
actually use this stuff.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Everything we’ve discussed so far assumes best intentions, and that the author is
acting in good faith, but falling victim to basic human failings.&lt;/p&gt;
&lt;p&gt;However many developers today (including myself) are paid and work for
for-profit companies that need to make money.  To an increasing extent making
this money depends on community mindshare, which means publishing
benchmarks that sway users to our software.  Authors have bosses that
they’re trying to impress or the content and tone of an article may be
influenced by people within the company other than the stated author.&lt;/p&gt;
&lt;p&gt;I’ve been pretty lucky working with Continuum Analytics (my employer) in that
they’ve been pretty hands-off with technical writing.  For other
employers that may be reading, we’ve actually had an easier time getting
business because of the honest tone in these blogposts in some cases.
Potential clients generally have the sense that we’re trustworthy.&lt;/p&gt;
&lt;p&gt;Technical honesty goes a surprisingly long way towards implying technical
proficiency.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/programming/biased-benchmarks/" rel="alternate"/>
    <summary>honesty is hard</summary>
    <published>2017-03-09T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/programming/write-dumb-code/</id>
    <title>Write Dumb Code</title>
    <updated>2018-01-27T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="write-dumb-code"&gt;

&lt;p&gt;&lt;em&gt;The best way you can contribute to an open source project is to remove lines of code from it.&lt;/em&gt;
&lt;em&gt;We should endeavor to write code that a novice programmer can easily
understand without explanation or that a maintainer can understand without
significant time investment.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As students we attempt increasingly challenging problems with increasingly
sophisticated technologies.  We first learn loops, then functions, then
classes, etc..  We are praised as we ascend this hierarchy, writing longer
programs with more advanced technology.  We learn that experienced programmers
use monads while new programmers use for loops.&lt;/p&gt;
&lt;p&gt;Then we graduate and find a job or open source project to work on with others.
We search for something that we can add, and implement a solution pridefully,
using the all the tricks that we learned in school.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ah ha! I can extend this project to do X!  And I can use inheritance here!  Excellent!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We implement this feature and feel accomplished, and with good reason.
Programming in real systems is no small accomplishment.  This was certainly my
experience.  I was excited to write code and proud that I could show off all of
the things that I knew how to do to the world.  As evidence of my historical
love of programming technology, here is a &lt;a class="reference external" href="https://github.com/mrocklin/matrix-algebra"&gt;linear algebra
language&lt;/a&gt; built with a another
meta-programming language.  Notice that no one has touched this code in several
years.&lt;/p&gt;
&lt;p&gt;However after maintaining code a bit more I now think somewhat differently.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;We should not seek to build software.  Software is the currency that we pay
to solve problems, which is our actual goal.  We should endeavor to build
as little software as possible to solve our problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We should use technologies that are as simple as possible, so that as many
people as possible can use and extend them without needing to understand
our advanced techniques.  We should use advanced techniques only when we
are not smart enough to figure out how to use more common techniques.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Neither of these points are novel.  Most people I meet agree with them to some
extent, but somehow we forget them when we go to contribute to a new project.
The instinct to &lt;em&gt;contribute by building&lt;/em&gt; and to &lt;em&gt;demonstrate sophistication&lt;/em&gt;
often take over.&lt;/p&gt;
&lt;section id="software-is-a-cost"&gt;
&lt;h2&gt;Software is a cost&lt;/h2&gt;
&lt;p&gt;Every line that you write costs people time.  It costs you time to write it of
course, but you are willing to make this personal sacrifice.  However this code
also costs the reviewers their time to understand it.  It costs future
maintainers and developers their time as they fix and modify your code.  They
could be spending this time outside in the sunshine or with their family.&lt;/p&gt;
&lt;p&gt;So when you add code to a project you should feel meek.  It should feel as
though you are eating with your family and there isn’t enough food on the
table.  You should take only what you need and no more.  The people with you
will respect you for your efforts to restrict yourself.  Solving problems with
less code is a hard, but it is a burden that you take on yourself to lighten
the burdens of others.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="complex-technologies-are-harder-to-maintain"&gt;
&lt;h2&gt;Complex technologies are harder to maintain&lt;/h2&gt;
&lt;p&gt;As students, we demonstrate merit by using increasingly advanced technologies.
Our measure of worth depends on our ability to use functions, then classes,
then higher order functions, then monads, etc. in public projects.  We show off
our solutions to our peers and feel pride or shame according to our
sophistication.&lt;/p&gt;
&lt;p&gt;However when working with a team to solve problems in the world the situation
is reversed.  Now we strive to solve problems with code that is as simple as
possible.  When we solve a problem simply we enable junior programmers to
extend our solution to solve other problems.  Simple code enables others and
boosts our impact.  We demonstrate our value by solving hard problems with only
basic techniques.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Look! I replaced this recursive function with a for loop and it still does
everything that we need it to.  I know it’s not as clever, but I noticed that
the interns were having trouble with it and I thought that this change might
help.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are a good programmer then you don’t need to demonstrate that you know
cool tricks.  Instead, you can demonstrate your value by solving a problem in a
simple way that enables everyone on your team to contribute in the future.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="but-moderation-of-course"&gt;
&lt;h2&gt;But moderation, of course&lt;/h2&gt;
&lt;p&gt;That being said, over-adherence to the “build things with simple tools” dogma
can be counter productive.  Often a recursive solution can be much simpler than
a for-loop solution and often times using a Class or a Monad is the right
approach.  But we should be mindful when using these technologies that we are
building for ourselves our own system; a system with which others have had no
experience.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/programming/write-dumb-code/" rel="alternate"/>
    <summary>The best way you can contribute to an open source project is to remove lines of code from it.
We should endeavor to write code that a novice programmer can easily
understand without explanation or that a maintainer can understand without
significant time investment.</summary>
    <published>2018-01-27T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/programming/minimal-bug-reports/</id>
    <title>Craft Minimal Bug Reports</title>
    <updated>2018-02-28T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="craft-minimal-bug-reports"&gt;

&lt;p&gt;Following up on a post on &lt;a class="reference external" href="https://matthewrocklin.com/blog/work/2016/08/25/supporting-users"&gt;supporting users in open source&lt;/a&gt;
this post lists some suggestions on how to ask a maintainer to help you with a problem.&lt;/p&gt;
&lt;p&gt;You don’t have to follow these suggestions.  They are optional.
They make it more likely that a project maintainer will spend time helping you.
It’s important to remember that their willingness to support you for free is optional too.&lt;/p&gt;
&lt;p&gt;Crafting minimal bug reports is essential for the life and maintenance of community-driven open source projects.
Doing this well is an incredible service to the community.&lt;/p&gt;
&lt;section id="minimal-complete-verifiable-examples"&gt;
&lt;h2&gt;Minimal Complete Verifiable Examples&lt;/h2&gt;
&lt;p&gt;I strongly recommend following Stack Overflow’s guidelines on &lt;a class="reference external" href="https://stackoverflow.com/help/mcve"&gt;Minimal Complete Verifiable Exmamples&lt;/a&gt;.  I’ll include brief highlights here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;… code should be …&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Minimal – Use as little code as possible that still produces the same problem&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Complete – Provide all parts needed to reproduce the problem&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Verifiable – Test the code you’re about to provide to make sure it reproduces the problem&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Lets be clear, this is &lt;em&gt;hard&lt;/em&gt; and takes time.&lt;/p&gt;
&lt;p&gt;As a question-asker I find that creating an MCVE often takes 10-30 minutes for a simple problem.
Fortunately this work is usually straightforward,
even if I don’t know very much about the package I’m having trouble with.
Most of the work to create a minimal example is about removing all of the code that was specific to my application,
and as the question-asker I am probably the most qualified person to do that.&lt;/p&gt;
&lt;p&gt;When answering questions I often point people to StackOverflow’s MCVE document.
They sometimes come back with a better-but-not-yet-minimal example.
This post clarifies a few common issues.&lt;/p&gt;
&lt;p&gt;As an running example I’m going to use Pandas dataframe problems.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="don-t-post-data"&gt;
&lt;h2&gt;Don’t post data&lt;/h2&gt;
&lt;p&gt;You shouldn’t post the file that you’re working with.
Instead, try to see if you can reproduce the problem with just a few lines of data rather than the whole thing.&lt;/p&gt;
&lt;p&gt;Having to download a file, unzip it, etc. make it much less likely that someone will actually run your example in their free time.&lt;/p&gt;
&lt;section id="don-t"&gt;
&lt;h3&gt;Don’t&lt;/h3&gt;
&lt;p&gt;I’ve uploaded my data to Dropbox and you can get it here: &lt;span class="xref myst"&gt;my-data.csv.gz&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my-data.csv.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="do"&gt;
&lt;h3&gt;Do&lt;/h3&gt;
&lt;p&gt;You should be able to copy-paste the following to get enough of my data to cause the problem:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;account-start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2017-02-03&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2017-03-03&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2017-01-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Alice Anders&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bob Baker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Charlie Chaplin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;balance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1432.32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;30000.00&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;db-id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2424&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;251&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;proxy-id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;525&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1525&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2542&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;525&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="o"&gt;...&lt;/span&gt;
                   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="actually-don-t-include-your-data-at-all"&gt;
&lt;h2&gt;Actually don’t include your data at all&lt;/h2&gt;
&lt;p&gt;Actually, your data probably has lots of information that is very specific to
your application.  Your eyes gloss over it but a maintainer doesn’t know what
is relevant and what isn’t, so it will take them time to digest it if you
include it.  Instead see if you can reproduce your same failure with artificial
or random data.&lt;/p&gt;
&lt;section id="id1"&gt;
&lt;h3&gt;Don’t&lt;/h3&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/mrocklin.github.io/mrocklin.github.io/programming/minimal-bug-reports.md&lt;/span&gt;, line 96); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “don’t”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here is enough of my data to reproduce the problem&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;account-start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2017-02-03&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2017-03-03&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2017-01-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Alice Anders&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bob Baker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Charlie Chaplin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;balance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1432.32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;30000.00&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;db-id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2424&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;251&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;proxy-id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;525&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1525&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2542&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;rank&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;525&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="o"&gt;...&lt;/span&gt;
                   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="id2"&gt;
&lt;h3&gt;Do&lt;/h3&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/mrocklin.github.io/mrocklin.github.io/programming/minimal-bug-reports.md&lt;/span&gt;, line 112); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “do”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;My actual problem is about finding the best ranked employee over a certain time period,
but we can reproduce the problem with this simpler dataset.
Notice that the dates are &lt;em&gt;out of order&lt;/em&gt; in this data (2000-01-02 comes after 2000-01-03).
I found that this was critical to reproducing the error.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;account-start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2000-01-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2000-01-03&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2000-01-02&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;db-id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Charlie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As we shrink down our example problem we often discover a lot about what causes the problem.
This discovery is valuable
and something that only the question-asker is capable of doing efficiently.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="see-how-small-you-can-make-things"&gt;
&lt;h2&gt;See how small you can make things&lt;/h2&gt;
&lt;p&gt;To make it even easier, see how small you can make your data.
For example if working with tabular data (like Pandas),
then how many columns do you actually need to reproduce the failure?
How many rows do you actually need to reproduce the failure?
Do the columns need to be named as you have them now or could they be just “A” and “B”
or descriptive of the types within?&lt;/p&gt;
&lt;section id="id3"&gt;
&lt;h3&gt;Do&lt;/h3&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/mrocklin.github.io/mrocklin.github.io/programming/minimal-bug-reports.md&lt;/span&gt;, line 142); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “do”.&lt;/p&gt;
&lt;/aside&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2000-01-03&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2000-01-02&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="remove-unnecessary-steps"&gt;
&lt;h2&gt;Remove unnecessary steps&lt;/h2&gt;
&lt;p&gt;Is every line in your example absolutely necessary to reproduce the error?
If you’re able to delete a line of code then please do.
Because you already understand your problem you are &lt;em&gt;much more efficient&lt;/em&gt; at doing this than the maintainer is.
They probably know more about the tool, but you know more about your code.&lt;/p&gt;
&lt;section id="id4"&gt;
&lt;h3&gt;Don’t&lt;/h3&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/mrocklin.github.io/mrocklin.github.io/programming/minimal-bug-reports.md&lt;/span&gt;, line 160); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “don’t”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;The groupby step below is raising a warning that I don’t understand&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- this produces the error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="id5"&gt;
&lt;h3&gt;Do&lt;/h3&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/mrocklin.github.io/mrocklin.github.io/programming/minimal-bug-reports.md&lt;/span&gt;, line 173); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “do”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;The groupby step below is raising a warning that I don’t understand&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- this produces the error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="use-syntax-highlighting"&gt;
&lt;h2&gt;Use Syntax Highlighting&lt;/h2&gt;
&lt;p&gt;When using Github you can enclose code blocks in triple-backticks (the
character on the top-left of your keyboard on US-standard QWERTY keyboards).
It looks like this:&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```python
x = 1
```
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="provide-complete-tracebacks"&gt;
&lt;h2&gt;Provide complete tracebacks&lt;/h2&gt;
&lt;p&gt;You know all of that stuff between your code and the exception that is hard to
make sense of?  You should include it.&lt;/p&gt;
&lt;section id="id6"&gt;
&lt;h3&gt;Don’t&lt;/h3&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/mrocklin.github.io/mrocklin.github.io/programming/minimal-bug-reports.md&lt;/span&gt;, line 202); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “don’t”.&lt;/p&gt;
&lt;/aside&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I get a ZeroDivisionError from the following code:

```python
def div(x, y):
    return x / y

div(1, 0)
```
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="id7"&gt;
&lt;h3&gt;Do&lt;/h3&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/mrocklin.github.io/mrocklin.github.io/programming/minimal-bug-reports.md&lt;/span&gt;, line 214); &lt;em&gt;&lt;a href="#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “do”.&lt;/p&gt;
&lt;/aside&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I get a ZeroDivisionError from the following code:

```python
def div(x, y):
    return x / y

div(1, 0)
```

```python-traceback
ZeroDivisionError                         Traceback (most recent call last)
&amp;lt;ipython-input-4-7b96263abbfa&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 div(1, 0)

&amp;lt;ipython-input-3-7685f97b4ce5&amp;gt; in div(x, y)
      1 def div(x, y):
----&amp;gt; 2     return x / y
      3

ZeroDivisionError: division by zero
```
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If the traceback is long that’s ok.  If you really want to be clean you can put
it in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;&lt;/code&gt;  brackets.&lt;/p&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I get a ZeroDivisionError from the following code:

```python
def div(x, y):
    return x / y

div(1, 0)
```

### Traceback

&amp;lt;details&amp;gt;

```python
ZeroDivisionError                         Traceback (most recent call last)
&amp;lt;ipython-input-4-7b96263abbfa&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 div(1, 0)

&amp;lt;ipython-input-3-7685f97b4ce5&amp;gt; in div(x, y)
      1 def div(x, y):
----&amp;gt; 2     return x / y
      3

ZeroDivisionError: division by zero
```

&amp;lt;/details&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="ask-questions-in-public-places"&gt;
&lt;h3&gt;Ask Questions in Public Places&lt;/h3&gt;
&lt;p&gt;When raising issues you often have a few possible locations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;GitHub issue tracker&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stack Overflow&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Project mailing list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Project Chat room&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E-mail maintainers directly (never do this)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Different projects handle this differently, but they usually have a page on
their documentation about where to go for help.  This is often labeled
“Community”, “Support” or “Where to ask for help”.  Here are the
recommendations from the
&lt;a class="reference external" href="https://pandas.pydata.org/community.html"&gt;Pandas community&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Generally it’s good to ask questions where many maintainers can see your
question and help, and where other users can find your question and answer if
they encounter a similar bug in the future.&lt;/p&gt;
&lt;p&gt;While your goal may be to solve your problem, the maintainer’s goal is likely
to create a record of how to solve problems like yours.  This helps many more
users who will have a similar problem in the future, see your well-crafted bug
report, and learn from the resulting conversation.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-personal-preferences"&gt;
&lt;h3&gt;My personal preferences&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;For user questions like “What is the right way to do X?” I prefer Stack Overflow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For bug reports like “I did X, I’m pretty confident that it should work, but I
get this error” I prefer Github issues&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For general chit-chat I prefer Gitter, though actually, I personally spend
almost no time in gitter because it isn’t easily searchable by future
users.  If you’ve asked me a question in Gitter I will almost certainly
not respond to it, except to direct you to github, stack overflow, or this
blogpost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I only like personal e-mail if someone is proposing to fund or seriously
support the project in some way&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But again, different projects do this differently and have different policies.
You should check the documentation of the project you’re dealing with to learn
how they like to support users.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/programming/minimal-bug-reports/" rel="alternate"/>
    <summary>Following up on a post on supporting users in open source
this post lists some suggestions on how to ask a maintainer to help you with a problem.</summary>
    <category term="Programming" label="Programming"/>
    <category term="Python" label="Python"/>
    <category term="scipy" label="scipy"/>
    <published>2018-02-28T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/engineering/slack-github/</id>
    <title>Why I Avoid Slack</title>
    <updated>2019-02-28T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="why-i-avoid-slack"&gt;

&lt;p&gt;I avoid interacting on Slack, especially for technical conversations around
open source software.  Instead, I encourage colleagues to have technical and
design conversations on GitHub, or some other system that is public, permanent,
searchable, and cross-referenceable.  In the spirit of Don’t Repeat Yourself
(DRY) I’m writing up these thoughts as a blogpost.&lt;/p&gt;
&lt;p&gt;Slack is a great tool.  Slack is a great way for colleagues within an
institution or group to communicate real-time with chat, voice, or video.
Slack is probably the most polished of the enterprise chat tools, and today is
something that probably most companies and collaborations should use.&lt;/p&gt;
&lt;p&gt;However internal real-time chat systems are, I think, bad for productivity
generally, especially for public open source software maintenance.  Real-time
chat systems make everyone feel productive (it’s fun to have a face-paced
technical conversation with colleagues), but do relatively little for long-term
community consensus building, particularly when the users and developers of a
project span a variety of institutions and a long range of time.&lt;/p&gt;
&lt;p&gt;Here are some more reasons in-depth why I prefer conversation on GitHub rather
than Slack.  I prefer GitHub because I want to …&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Engage collaborators&lt;/strong&gt; that aren’t on our Slack&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;External collaborators may have the &lt;em&gt;answers&lt;/em&gt; that we need.  Having the
conversation in a private place means that we can’t ask them for their
help, or, if we do eventually need to ask them for help, we need to
summarize the entire conversation that we’ve had privately, which
wastes time.&lt;/p&gt;
&lt;p&gt;Individual open source maintainers often don’t know the answers that
people ask, but they do know how to redirect to someone who does.
More often than not, that person is in another institution.  If you ask
your question on GitHub this redirection is easy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;External collaborators may have &lt;em&gt;questions or context&lt;/em&gt; that we need.
Their questions and experience can help us create a better product than
we’re capable of producing with only our in-house expertise.&lt;/p&gt;
&lt;p&gt;Most important problems are useful across many organizations, while
solutions built within one organization are often overly-specific to
the needs of that organization.  By getting broader context, OSS has a
much higher likelihood of success.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;External collaborators are much more likely to &lt;em&gt;buy in&lt;/em&gt; to whatever we
come up with if they were able to see the reasoning behind it and
participate during that conversation.&lt;/p&gt;
&lt;img alt="https://imgs.xkcd.com/comics/standards.png" src="https://imgs.xkcd.com/comics/standards.png" style="width: 70%;" /&gt;
&lt;p&gt;If you open the design process to the creators and users of the
previous 14 standards, the 15th standard has a much higher probability
of actually being used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we adopt community maintained open source software, the team we work
with extends beyond our institution, and beyond the people who listen in to
all of our institution’s Slack conversations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Record the conversation&lt;/strong&gt; in case participants change in the future.&lt;/p&gt;
&lt;p&gt;Most development efforts change hands over time.  We may work on this
project today, but next month some of us will probably move on to other
projects and new people will arrive.  These new developers ask questions
about why something was done and there are one of two answers, depending on
whether the conversation was on Slack or GitHub:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Slack&lt;/strong&gt;: We had a conversation about this a while ago and decided
that it was the right course of action.  Just go with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: Go look at Issue #1234 and you’ll be able to see the
reasoning why, who had which opinions, and whether or not your concern
was raised there.  If your concern wasn’t raised there then we can
easily pick up that thread of conversation on GitHub a year later
(this happens all the time in long running OSS projects).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even in the same group we often find that people repeat the same
conversations.  If there is an obvious place for that conversation, and you
need to scroll through previous comments, then it’s far less likely that
people will have to repeat themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Serve the silent majority&lt;/strong&gt; of users who search the web for answers to
their questions or bugs.&lt;/p&gt;
&lt;p&gt;On Slack, maintainers get asked the same questions daily.  We have people
ask for “a few minutes of our time” every few minutes.  We strongly prefer
to answer questions once in a place where future users can find the answer
from a web search.  This includes people outside the company, but also
people within the company.&lt;/p&gt;
&lt;p&gt;Maintainers are much happier devoting a lot of time to craft a high quality
answer to questions if those questions and answers can help others in the
future.  I personally spend a lot of time crafting answers on Stack
Overflow, while I usually ignore questions on chat systems.  Want a good
answer?  Pose a &lt;a class="reference external" href="https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports"&gt;good
question&lt;/a&gt;
in a public place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Encourage thoughtful discourse&lt;/strong&gt;.
Because GitHub is a permanent record it forces people to think more before
they write.  This is hard on casual conversation, yes, but we’re not here
for casual conversation.  Asking people to spend a minute crafting comments
generally results in a conversation that is higher functioning, more
concise, and much easier to review later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cross reference issues&lt;/strong&gt;.
Slack is siloed.  It doesn’t allow people to cross reference people or
conversations across Slacks.  OSS maintainers get invited to literally
dozens of Slack organizations.  It is not feasible to manage dozens of
Slack tabs and different siloed organziations.&lt;/p&gt;
&lt;p&gt;GitHub is public and conversations across different projects can easily
cross reference each other.  This encourages collaboration between projects
and avoids wheel-reinvention.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Slack is the easy choice.  It’s so much easier just to open up a one-on-one
conversation with someone, chat with them for a bit, get your answer, and feel
like you’ve had a productive experience.  It feels good, but is rarely the
correct choice long term, especially when you add up how many times that same
conversation occurs.  Putting in a bit more effort and starting (or
continuing!) a well-posed conversation in a public issue tracker like GitHub is
likely better for your project and for your teammates long term.&lt;/p&gt;
&lt;p&gt;I still love Slack for inter-personal contact.  It’s great for chatting with
teammates, checking in to see how people are doing emotionally, or sharing
pictures about our lives.  Professionally I think it’s also a good place for
internal teams to do daily check-ins and sometimes to arrange short-term
priorities.  Slack has many great uses, but I think that in-depth technical
conversation and long-term planning aren’t among them.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/engineering/slack-github/" rel="alternate"/>
    <summary>I avoid interacting on Slack, especially for technical conversations around
open source software.  Instead, I encourage colleagues to have technical and
design conversations on GitHub, or some other system that is public, permanent,
searchable, and cross-referenceable.  In the spirit of Don’t Repeat Yourself
(DRY) I’m writing up these thoughts as a blogpost.</summary>
    <published>2019-02-28T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/engineering/maintainer/</id>
    <title>Maintainers</title>
    <updated>2019-05-18T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="maintainers"&gt;

&lt;p&gt;What are the expectations and best practices for maintainers of open source software libraries?
How can we do this better?&lt;/p&gt;
&lt;p&gt;This post frames the discussion and then follows with best practices based on my personal experience and opinions.  &lt;em&gt;I make no claim that these are correct.&lt;/em&gt;&lt;/p&gt;
&lt;section id="let-us-assume-external-responsibility"&gt;
&lt;h2&gt;Let us Assume External Responsibility&lt;/h2&gt;
&lt;p&gt;First, the most common answer to this question is the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;What are expectations on OSS maintainers?&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; &lt;em&gt;Nothing at all.  They’re volunteers.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, let’s assume for a moment that these maintainers are paid to maintain
the project some modest amount, like 10 hours a week.&lt;/p&gt;
&lt;p&gt;How can they best spend this time?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-a-maintainer"&gt;
&lt;h2&gt;What is a Maintainer?&lt;/h2&gt;
&lt;p&gt;Next, let’s disambiguate the role of &lt;em&gt;developer&lt;/em&gt;, &lt;em&gt;reviewer&lt;/em&gt;, and &lt;em&gt;maintainer&lt;/em&gt;&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developers&lt;/strong&gt; fix bugs and create features.  They write code and docs and
generally are agents of change in a software project.  There are often many
more developers than reviewers or maintainers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reviewers&lt;/strong&gt; are known experts in a part of a project and are called on to
review the work of developers, mostly to make sure that the developers
don’t break anything, but also to point them to related work, ensure common
development practices, and pass on institutional knowledge.  There are
often more developers than reviewers, and more reviewers than maintainers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Maintainers&lt;/strong&gt; are loosely aware of the entire project.
They track ongoing work and make sure that it gets reviewed and merged in a
timely manner.  They direct the orchestra of developers and reviewers,
making sure that they connect to each other appropriately, often serving
as dispatcher.&lt;/p&gt;
&lt;p&gt;Maintainers also have final responsibility.
If no reviewer can be found for an important contribution, they review.
If no developer can be found to fix an important bug, they develop.
If something goes wrong, it’s eventually the maintainer’s fault.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="best-practices"&gt;
&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;p&gt;Now let’s get into the best practices of a maintainer, again assuming the
context that they are paid to do this about 25% time for a moderately busy
software project (perhaps 10-50 issues/contributions per day).&lt;/p&gt;
&lt;section id="timely-response"&gt;
&lt;h3&gt;Timely Response&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Welcome Bob!  Nice question.  I’m currently a bit busy right now, but I
think that if you look through &lt;span class="xref myst"&gt;these notes&lt;/span&gt; that they might point you in the
right direction.  I should have time to check back here by Thursday.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The maintainer is often the first person a new contributor meets.
Like a concierge or greeter at a hotel or restaurant, it’s good to say “Hi”
when someone shows up, even if that’s all you can say at that moment.&lt;/p&gt;
&lt;p&gt;When someone is raising an issue or contributing a patch, try to give them a
response within 24 hours, &lt;em&gt;even if it’s not a very helpful response&lt;/em&gt;.  It’s
scary to ask something in public, and much scarier to try write code and
contribute it to a project.  Acknowledging the contributor’s question or work
helps them to relax and feel welcome.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="answer-easy-questions-easily"&gt;
&lt;h3&gt;Answer Easy Questions Easily&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Thanks for the question Bob.  I think that what you’re looking for is
described in &lt;span class="xref myst"&gt;these docs&lt;/span&gt;.  Also, in the future we welcome these sorts of
questions on Stack Overflow.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Answer simple questions quickly, and move on.&lt;/p&gt;
&lt;p&gt;After answering, you might also direct new users and contributors to places
like Stack Overflow where they can ask questions in the future.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="find-help-for-hard-problems"&gt;
&lt;h3&gt;Find Help for Hard Problems&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Hey Alice, you’re an expert on X, would you mind checking this out?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You probably have a small team of expert reviewers to ask for help for tricky
problems.  Get to know them well and use them.  It’s not your job to solve
every problem, and you probably don’t have time anyway.  It’s your job to make
sure that the right reviewer sees the problem, and then track that it gets
resolved.&lt;/p&gt;
&lt;p&gt;But also, don’t &lt;em&gt;overuse&lt;/em&gt; your reviewers.  Everyone has a tolerance for how
much they’re willing to help.  You may have to spread things out a little.
Getting to know your reviewers personally and learning their interests can help
you to make decisions about when and where to use them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="but-follow-up"&gt;
&lt;h3&gt;But follow up&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Just checking in here.  It looks like Reviewer Alice has asked for X,
Developer Bob is this something that you have time to do?  Also it looks like
Developer Bob has a question about Y.  Reviewer Alice do you have any
suggestions for Bob on this?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The reviewers you rely on are likely to swoop in, convey expertise, and then
disappear back to their normal lives.  Thank them for their help, and don’t
rely on them to track the work to completion, that’s your job.  You may have to
direct conversation a bit.&lt;/p&gt;
&lt;p&gt;We often see the following timeline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer:&lt;/strong&gt; “Hi! I made a patch for X!”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Maintainer:&lt;/strong&gt; “Welcome!  Nice patch!  Hey Reviewer, you know X really well,
could you take a look?”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reviewer:&lt;/strong&gt; “Hi Developer!  Great patch!  I found a bunch of things that
were wrong with it, but I think that you can probably fix them easily!”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer:&lt;/strong&gt; “Oh yeah!  You’re right, great, I’ve fixed everything you
said!”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;silence&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point, jump in again!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Maintainer:&lt;/strong&gt; “OK, it looks like you’ve handled everything that the
reviewer asked for.  Nice work!  Reviewer, anything else?  Otherwise, I plan
to merge this shortly”&lt;/p&gt;
&lt;p&gt;“Also, I notice that your code didn’t pass the linter.  Please check out
this doc for how to run our auto-linter.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer:&lt;/strong&gt; “Done!”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Maintainer:&lt;/strong&gt; “OK, merging. Thanks Developer!”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This situation is nice, but not ideal from the maintainer’s perspective.
Ideally the reviewer would finish things up, but often they don’t.
In some cases it might even be &lt;em&gt;their job&lt;/em&gt; to finish things up,
but even then, it’s also &lt;em&gt;your job&lt;/em&gt; to make sure that things finish up so if
they don’t show up, then it’s on the maintainer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All responsibility eventually falls back onto the maintainer.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="prioritize-your-time"&gt;
&lt;h3&gt;Prioritize your time&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“It’d be great if you could provide a minimal example as described
&lt;a class="reference external" href="https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports"&gt;here&lt;/a&gt;.
Please let us know if you’re able to manage this.  otherwise given time
constraints I’m not sure what we can do to help further.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some contributors are awesome and do everything right.
They ask questions with minimal reproducible examples.
They provide well-tested code.
Everything.  &lt;a class="reference external" href="https://matthewrocklin.com/blog/work/2016/08/25/supporting-users"&gt;They’re awesome.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Others aren’t as awesome.
They ask for a lot of your time to help them solve problems that have
little to do with your software.
You probably can’t solve every problem well, and working on their problems
steals important time away that you could be spending improving documentation
or process.&lt;/p&gt;
&lt;p&gt;Politely thank misinformed users and direct them towards
standard documentation on expectations on asking questions and raising bug
reports like &lt;a class="reference external" href="https://stackoverflow.com/help/mcve"&gt;Stack Overflow’s MCVE&lt;/a&gt;
or possibly &lt;a class="reference external" href="https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports"&gt;this post on crafting minimal bug
reports&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="get-used-to-a-lot-of-e-mail"&gt;
&lt;h3&gt;Get used to a lot of e-mail&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Ah, the joy of e-mail filters”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you’re tracking every conversation then you’ll be getting hundreds of
e-mails a day.  You don’t need to read all of these in depth (this would take
most of your 10 hours a week) but you probably should skim them.  Don’t worry,
with practice you can do this quickly.&lt;/p&gt;
&lt;p&gt;You certainly don’t want this in your personal inbox, so you may want to invest
a bit of time in organizing e-mail filters and labels.
Personally I use GMail and with their filters and keyboard shortcuts I can
usually blast through e-mail pretty quickly.  (Hooray for j/k Vim-style bindings in GMail)&lt;/p&gt;
&lt;p&gt;I check my Github inbox a few times a day.  It usually takes 20-30 minutes in
the morning (due to all of the people active when I’m asleep) and 10 minutes
during other times in the day.  I look forward to this time.  It’s nice seeing
a lot of people being productive.&lt;/p&gt;
&lt;p&gt;Mostly during this period I’m looking for anyone who is blocked, and if
necessary I respond with something to help unblock them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="but-check-the-issue-tracker-periodically"&gt;
&lt;h3&gt;But check the issue tracker periodically&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Whoops!  I totally dropped this!  Sorry!”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You’ll miss things.  People will force-push to Github (which triggers no alert)
or the last person to reply to an issue will be you with no response. There are
also just old issues and PRs that have slipped through and aren’t coming up on
your e-mail.&lt;/p&gt;
&lt;p&gt;So every day or two, it’s good to go through all issues and PRs that have a
glimmer of life in them and check in.  Often you’ll find that someone has done
work and the reviewer has left, or that the developer has just left.  Now is a
good time to ask a gentle message&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Just checking in, what’s the status here?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sometimes they’ll be busy at work and will come back in a couple days.
Sometimes they’ll need a push in the right direction.
Sometimes they’ll disappear completely, and you have to decide whether to
finish the work or let it linger.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="weekends"&gt;
&lt;h3&gt;Weekends&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Now that I’m done with work for the week, I can finally finish up this PR.
Wait, where did everybody go?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is hard, but a lot of the developers aren’t contributing as part of
their day job, and so they work primarily on the weekends.  If they only work
on the weekends and you only respond during the week then we’re going to have
very long iteration cycles, which is frustrating for everyone and unlikely to
result in successful work.&lt;/p&gt;
&lt;p&gt;Personally I spend a bit of time in the morning and evening doing light
maintenance.  That’s a personal choice though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="don-t-let-reviewers-drag-things-out-too-long"&gt;
&lt;h3&gt;Don’t let reviewers drag things out too long&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Can you just add one more thing?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Developers want to get their work in quickly.
Reviewers sometimes want to ask lots of questions, make small suggestions,
and sometimes have very long conversations.
At some point you need to step in and ask for a definitive set of necessary changes.
This gives the developer a sense of finality, a light at the end of the tunnel.&lt;/p&gt;
&lt;p&gt;Very long review periods are a common anti-behavior today, they are destructive to
attracting new developers and contribute to reviewer burnout.  A reviewer
should ideally iterate once or twice with a developer with in-depth comments
and then we should be done.  This breaks down in a few ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Slow Rollout:&lt;/strong&gt; The reviewer provides a few small suggestions, waits
for changes, then provides a few more, and so on, resulting in many
iterations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Serial Reviewers:&lt;/strong&gt; After one reviewer finishes up, a second reviewer
arrives with their own set of requested changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reviewer Disagreement:&lt;/strong&gt; The two reviewers provide different suggestions
and the developer makes changes and undoes those changes based on who spoke
last.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Endless Discussion:&lt;/strong&gt; The reviewers then engage in very long and detailed
technical conversation, scaring away the original developer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is reviewer breakdown, and it’s up to the maintainer to identify that
it’s happening, step in and say the following:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;OK, I think that what we have is a sufficient start.  I recommend that we
merge what we have here and continue the rest of this conversation in a
separate issue&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="thank-developers"&gt;
&lt;h3&gt;Thank Developers&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“I appreciate all your work here.  In particular I’m really happy about these tests!”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;They look up to you.
A small amount of praise from you can make their day and encourage them to
continue contributing to open source.&lt;/p&gt;
&lt;p&gt;Also, as with normal life, if you can call out some specific thing that they
did well it becomes more personal.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="encourage-excellent-developers-to-review-and-allow-excellent-reviewers-to-maintain"&gt;
&lt;h3&gt;Encourage Excellent Developers to Review, and Allow Excellent Reviewers to Maintain&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Hey Bob, this new work is similar to work that you’ve done before.  Any
interest in taking a look?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Over time you will notice that a repeat developer returns to the project
frequently, often to work on a particular topic.  When a new contribution
arrives in that part of the code, you might intentionally invite the repeat
developer to review that work.  You might invite them to become a reviewer.&lt;/p&gt;
&lt;p&gt;Similarly, when you find that a skilled reviewer frequently handles issues on
their own, you should find ways to give them ownership over that section of the
code.  Defer to their judgement.  Make sure that they have commit rights and
the ability to publish new packages (if the code is separate enough to allow
for that).  You should clear the way for them to become a maintainer.&lt;/p&gt;
&lt;p&gt;To be clear, I wouldn’t encourage everyone.  Even very good developers can be
bad reviewers or maintainers.  Bad reviewers can be unwelcoming and destructive
to the process in a variety of ways.  This activity requires social skills
that aren’t universally held, regardless of programming skill.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="take-a-vacation-but-tell-someone"&gt;
&lt;h3&gt;Take a Vacation (But Tell Someone)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“I’d like to checking out for a week.  Alice, would you mind keeping an eye on
things?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Maintaining a project with a few peers is wonderful because it’s easier for
people to take breaks and attend to their mental health.  However, it’s
important to make people aware of your absence during vacations or illness.
A quick word to a colleague about an absence, expected or otherwise, can help
to keep things running smoothly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Many&lt;/em&gt; OSS projects today have a single core maintainer.  This is hard on them
and hard on the project (solo-maintainers tend to quickly become gruff).
This post is designed with this problem in mind.
Hopefully as we develop a vocabulary and conversation around the administrative
sides of maintenance it will become easier to identify and encourage these
behaviors in new maintainers.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;“Thanks for taking the time”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Maintaining a project is not about being a great developer or a clever
reviewer.  It’s about enabling others, removing road-blocks before they arise,
and identifying and resolving difficult social situations.  It has much more to
do with logistics, coordination, and social behaviors than it has to do with
algorithms and version control.&lt;/p&gt;
&lt;p&gt;I have to admit, I’m not great at this, but I’m trying to become better.
Maintaining a software project is a learned skill and takes effort.
The reward can be significant though.&lt;/p&gt;
&lt;p&gt;A well maintained project is pleasant to work on and attracts a productive team
of friendly developers and reviewers that support each other.  It’s also a
great way to learn more about how people use your software project than you
ever could while writing code.  The activity of maintaining software gives you
enough exposure to see where the project is headed and what’s possible going
forward.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/engineering/maintainer/" rel="alternate"/>
    <summary>What are the expectations and best practices for maintainers of open source software libraries?
How can we do this better?</summary>
    <published>2019-05-18T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/programming/avoid-indirection/</id>
    <title>Avoid Indirection</title>
    <updated>2019-06-23T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="avoid-indirection"&gt;

&lt;p&gt;This post argues for avoiding indirection in community code.&lt;/p&gt;
&lt;section id="we-are-taught-to-hide-away-details"&gt;
&lt;h2&gt;We are taught to hide away details&lt;/h2&gt;
&lt;p&gt;I often see code where authors abstract away details by placing them in some
external function.  Here is a toy example:&lt;/p&gt;
&lt;section id="before-indirection"&gt;
&lt;h3&gt;Before indirection&lt;/h3&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="after-indirection"&gt;
&lt;h3&gt;After indirection&lt;/h3&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_foolike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# utils.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_foolike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are good reasons for this behavior:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;If this code is repeated several times
it can make things more compact&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If this code is repeated several times
it creates a central place for that logic
so that it can be changed centrally in the future&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It hides away details that may not be relevant to the main point of the function.
It’s like a footnote in prose.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It gives a name to a set of operations,
using the function name as inline documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If often feels cleaner and more abstract&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’re taught to do this in school.
Find some chunk of functionality,
abstract it away,
move on.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-case-to-avoid-indirection"&gt;
&lt;h2&gt;The case to avoid indirection&lt;/h2&gt;
&lt;p&gt;However, there is also a cost to this behavior.
When a new reader encounters this code,
they need to jump between many function definitions in many files.
This non-linear reading process requires more mental focus
than reading linear code.&lt;/p&gt;
&lt;p&gt;This indirection isn’t as much of a problem during the writing process,
the original author is focused on building up an abstraction model in their head,
and so writing this abstraction into code makes sense and feels good.
However, it’s much more of a problem when a reader is asked
to inspect and understand a piece of code quickly.
This happens in two important situations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;During review&lt;/strong&gt;, when a reviewer is asked to verify that code is
sensible before it can be merged into the main project.
That reviewer probably has about a tenth as much time to spend
as the original author does on that code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;While debugging&lt;/strong&gt; future issues.
This code will eventually be involved in a bug and some completely
different developer will have to glance at this code to figure out what’s going on.
They’ll have to understand some small section this code within a few minutes
to determine what is relevant.
They won’t be able to invest the time to understand the full thought process behind it,
and a web of function definitions can slow down this process considerably.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both review and debugging are far more often bottlenecks in modern community
code than is original development.  Because of this, I often encourage
developers to avoid abstraction, and “please inline this function definition”.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="but-functions-are-still-a-good-idea"&gt;
&lt;h2&gt;But functions are still a good idea&lt;/h2&gt;
&lt;p&gt;Just to be clear,
there are plenty of reasons to separate complex logic into multiple functions,
particularly when there is repetition,
or when some important policy is likely to change in the future.
There is some balance to find here.&lt;/p&gt;
&lt;p&gt;Mostly, I want authors to be aware that there is a human cost to indirection
that is felt more acutely by everyone reading the code except the original author.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="further-reading"&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;This post extends the broad theme in the post &lt;a class="reference external" href="https://matthewrocklin.com/blog/work/2018/01/27/write-dumb-code"&gt;Write Dumb Code&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/programming/avoid-indirection/" rel="alternate"/>
    <summary>This post argues for avoiding indirection in community code.</summary>
    <published>2019-06-23T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/writing/write-short-blogposts/</id>
    <title>Short Blogposts</title>
    <updated>2019-06-25T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="short-blogposts"&gt;

&lt;p&gt;I encourage my colleagues to write blogposts more frequently.
This is for a few reasons:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It informs your broader community what you’re up to, and allows that community to communicate back to you quickly.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You communicating to the community fosters a sense of collaboration,
openness, and trust.  You gain collaborators, build momentum behind your
work, and curate a body of knowledge that early adopters can consume to
become experts quickly.&lt;/p&gt;
&lt;p&gt;Getting feedback from your community helps you to course-correct early
in your work, and stops you from wasting time in inefficient courses of
action.&lt;/p&gt;
&lt;p&gt;You can only work for a long time without communicating if you are either
entirely confident in what you’re doing, or reckless, or both.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It increases your visibility, and so is good for your career.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have a great job.  I find my work to be both intellectually
stimulating and ethically worthwhile.  I’m also decently well paid for it.&lt;/p&gt;
&lt;p&gt;I have this job largely because a potential employer a long time ago read
my blog when I was just starting out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It focuses you towards tasks that are relevant to others.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you set an expectation of regularly publishing a blogpost, you find
yourself seeking out work that will engage people.  This is a nice
objective to try to optimize, and keeps you on task serving the general
public.&lt;/p&gt;
&lt;p&gt;Obviously, you don’t want to take this too far, but my guess is that most
developers could use a little more orientation towards public interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It improves your communication skills&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your effort is valuable only if people understand and adopt it.
This is true for technical programming, but also true for most efforts.
Writing regularly encourages you to think about effective communication.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="but-i-m-too-busy"&gt;
&lt;h2&gt;But I’m too busy&lt;/h2&gt;
&lt;p&gt;Ah!  Indeed.&lt;/p&gt;
&lt;p&gt;How are we supposed to get work done if we’re writing blogposts all the time?&lt;/p&gt;
&lt;p&gt;We should &lt;strong&gt;reduce our standards&lt;/strong&gt;.
Blogposts don’t have to be big endeavors that solve a huge problem.
They are not scientific journal articles.  They can just be longer-than-average
tweets.&lt;/p&gt;
&lt;p&gt;We can &lt;strong&gt;write short blogposts&lt;/strong&gt; that we write in a fixed amount of time.
Personally, I like timing myself (I started this blopgost just 18 minutes ago)
and time-boxing myself (I plan to publish this this afternoon before my next
meeting).&lt;/p&gt;
&lt;p&gt;One of my favorite bloggers, &lt;a class="reference external" href="https://www.johndcook.com/blog/"&gt;John D Cook&lt;/a&gt;
writes an excellent blog that follows this concise approach.  Here are some
recent posts from his blog:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.johndcook.com/blog/2019/06/17/keeping-accurate-dates/"&gt;Protecting privacy while keeping detailed date information&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.johndcook.com/blog/2019/06/19/why-regex/"&gt;Why are regular expressions difficult?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.johndcook.com/blog/2019/06/20/bounds-on-the-nth-prime/"&gt;Bounds on the nth prime&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all about a page long, and are a great read.
Honestly, I probably wouldn’t read a scientific journal on any of these topics
(they’re not my field) but &lt;strong&gt;I know that John’s posts are concise, so I’m
happier to dive in&lt;/strong&gt; than for someone that I know produces very long posts.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;You should write more.  It can be easy if you don’t make a big deal out of it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="timings"&gt;
&lt;h2&gt;Timings&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;12:30: Talking to a colleague about writing short blogposts.  Decide that
I should stop one-on-one communication, and just write a blogpost about
this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;12:51: Start writing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;13:16: Finish first draft, render it to take a look and edit&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;13:25: Finish&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;13:26: Publish&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;13:27: Tweet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;13:29: Back to work!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;13:32: Oops! Typo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/writing/write-short-blogposts/" rel="alternate"/>
    <summary>I encourage my colleagues to write blogposts more frequently.
This is for a few reasons:</summary>
    <published>2019-06-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/engineering/senior-engineer/</id>
    <title>Senior Engineers</title>
    <updated>2019-11-09T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="senior-engineers"&gt;

&lt;p&gt;Software development is both a highly technical and a highly creative process.
Programmers are reasonably proud of their abilities and experience,
much in the same way that expert artists or artisans can be proud of their work.&lt;/p&gt;
&lt;p&gt;Unfortunately, like art, there is no obvious scale on which to measure programmers.
We throw around terms like “junior engineer” and “senior engineer” on job
titles and resumes, but there isn’t a clear definition for these terms.
If you look online you’ll find a variety of definitions from a variety of
bloggers.  This article is one such blogpost.&lt;/p&gt;
&lt;p&gt;In this post I lay out my criteria for senior engineers.
As with many posts like this, it will mostly focus on non-technical aspects of the job.&lt;/p&gt;
&lt;p&gt;For the lazy, I’ll summarize this post in the following sections. Senior engineers …&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Are technically skilled&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handle vague requirements&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seek to understand context&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect with stakeholders&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take ownership and talk back&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Communicate regularly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handle uncertainty, and are comfortable with failure&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask for help&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take vacations&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="are-technically-skilled"&gt;
&lt;h2&gt;Are technically skilled&lt;/h2&gt;
&lt;p&gt;First, senior engineers need to be able to program well.
This has less to do with understanding language constructs and frameworks
(these are traits by which we judge junior engineers)
and is more about designing systems that can be easily reasoned about,
maintained, and extended by junior engineers into the future.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Senior engineers can design and implement boring solutions to complex problems.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, that that’s out of the way,
let’s get on to the non-technical aspects of senior engineering.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="handle-vague-requirements"&gt;
&lt;h2&gt;Handle vague requirements&lt;/h2&gt;
&lt;p&gt;The more senior you are in an organization,
the more vague and poorly-specified your tasks become.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Junior engineers get tasks like&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Run this specific benchmark on this component of our platform.
Then try swapping out algorithm X for Y and report back the results”&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Senior engineers get tasks like&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Please figure out why the platform is slow and fix it”&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Junior engineers are more actively managed,
while senior engineers are trusted to figure things out on their own,
reliably come to a decent solution decently quickly
without someone guiding their way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="seek-to-understand-context"&gt;
&lt;h2&gt;Seek to understand context&lt;/h2&gt;
&lt;p&gt;To achieve this,
senior engineers acknowledge their own ignorance of the situation,
seek out others to help them understand the context in which their work matters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;So given a task like&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Please figure out why the platform is slow and fix it”&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They understand that this was actually&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Someone somewhere is complaining about performance.
Figure out who this was, what will make them happy,
and while you’re at it
see if there is anything we should be concerned about long term”&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Senior engineers seek to understand the context of the task given to them so
that they can resolve underlying issues efficiently.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="connect-with-stakeholders"&gt;
&lt;h2&gt;Connect with Stakeholders&lt;/h2&gt;
&lt;p&gt;To do this, a senior engineer reaches out to other stakeholders.
This might be the people who raised the issue/ticket,
the people who are most affected by it,
or even just someone they know personally who is well informed about this sort of problem.&lt;/p&gt;
&lt;p&gt;The engineer then seeks to learn more about the problem so that they can design
an efficient plan to solve it.&lt;/p&gt;
&lt;p&gt;So for original task above:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;“Please figure out why the platform is slow and fix it”&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;they might first ask their colleagues why it’s important that things are fast.
Maybe it’s just frustrating users that they don’t know how long things will take,
and so actually the solution to this problem is to implement a progress bar,
rather than dive into optimizing code,
which, while fun, likely isn’t the best use of time.&lt;/p&gt;
&lt;p&gt;The proposed solution given by the manager is often wrong.
That’s ok, senior engineers identify the root problem so that they
can develop a more effective solution.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="take-ownership-and-talk-back"&gt;
&lt;h2&gt;Take ownership and talk back&lt;/h2&gt;
&lt;p&gt;A senior engineer should feel comfortable disagreeing with their manager and peers when constructive.
They understand that they have been trusted with this problem,
and the they are likely the person who has the most time to focus on it.
They will quickly become the expert here and know more than their managers,
who are often distracted and make incorrect judgements about these vague tasks.
Managers are often juggling many things and so often make mistakes.&lt;/p&gt;
&lt;p&gt;As a senior engineer learns more they naturally take control of the problem,
both technically and socially,
and handle communication with the broader team.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="communicate-regularly"&gt;
&lt;h2&gt;Communicate regularly&lt;/h2&gt;
&lt;p&gt;As the senior engineer takes control,
they communicate with the relevant stakeholders about what is going on.
This is both to allow other people to plan around the engineer’s work,
and also to verify that the plans of the engineer remain valid as things inevitably change.
This communication might be sending out update e-mails,
updating issues/tickets,
or reaching out to known stakeholders directly in one-on-one conversations.
They don’t ask for permission to do these things,
they just go ahead if they think that it’s probably the right thing to do.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="handle-uncertainty-and-fail-comfortably"&gt;
&lt;h2&gt;Handle uncertainty, and fail comfortably&lt;/h2&gt;
&lt;p&gt;Senior engineers are given positions of ownership over difficult problems.
They are placed in positions where they are likely to fail.&lt;/p&gt;
&lt;p&gt;This is ok.  They know that they will survive.
While a junior engineer might be mortified at making a public mistake,
a senior engineer is self-assure and has enough reputation to fail safely.
No one is perfect, and no one can do everything right all the time, especially
when operating on their own.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ask-for-help"&gt;
&lt;h2&gt;Ask for help&lt;/h2&gt;
&lt;p&gt;Senior engineers engage peers in the company when necessary to help them
accomplish larger tasks.
Probably most of the task that they were given is well within their expertise,
but there may be some parts that they know they’re not going to be efficient at.
To resolve this, senior engineers know how to ask for short term resources
within their company, and are comfortable doing so, especially when it’s likely
to be more cost effective for the institution.&lt;/p&gt;
&lt;p&gt;So in our example maybe the backend engineer who is building a progress bar
identifies that they need a little bit of front-end work to make the bar
integrate well into the visual design of the broader product.
The senior engineer has learned the process to ask for this help from peers,
including peers from very different teams.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="take-vacations"&gt;
&lt;h2&gt;Take Vacations&lt;/h2&gt;
&lt;p&gt;Senior engineers have been around long enough to realize that
they work and live better when they are well rested.&lt;/p&gt;
&lt;p&gt;They also know not to get stressed out by any particular problem,
even if that problem seems critical at the time.&lt;/p&gt;
&lt;p&gt;The senior engineer works a comfortable number of hours during the week,
and makes sure to take solid chunks of vacation time to help them clear their head,
and invest in their life and mental health.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Senior engineers are trusted to get things done.
For larger and more vaguely defined tasks this requires
technical, organizational, and emotional maturity.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/engineering/senior-engineer/" rel="alternate"/>
    <summary>Software development is both a highly technical and a highly creative process.
Programmers are reasonably proud of their abilities and experience,
much in the same way that expert artists or artisans can be proud of their work.</summary>
    <published>2019-11-09T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/engineering/engineers-and-sales/</id>
    <title>Listen to sell</title>
    <updated>2019-12-05T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="listen-to-sell"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Engineer:&lt;/strong&gt; &lt;em&gt;Hey Boss, what should I know to more effectively sell our product?&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Boss:&lt;/strong&gt; &lt;em&gt;Resist the urge to answer technical questions&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had this brief conversation years ago at an industry conference.
This advice has proven invaluable over the years in many contexts
(including beyond corporate sales)
and I’ve re-shared it countless times,
so I thought I’d write it up.&lt;/p&gt;
&lt;section id="sales-is-about-listening"&gt;
&lt;h2&gt;Sales is About Listening&lt;/h2&gt;
&lt;p&gt;My then boss (Peter Wang) expanded on his main point&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Resist the urge to answer technical questions&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To go on to say that as engineers,
we always want to show off how something works.
This is either out of a need to show that we are knowledgable,
or just because we like to geek out.&lt;/p&gt;
&lt;p&gt;But we often go too deeply too quickly into a solution
before we fully understand the potential customers’ problem.
This is almost always a waste of everyone’s time.&lt;/p&gt;
&lt;p&gt;So when a customer asks a technical question,
it’s often better to follow up with a question to better understand their situation.
Here is a small example interaction&lt;/p&gt;
&lt;section id="bad-engineer-talks-first"&gt;
&lt;h3&gt;Bad.  Engineer talks first&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customer:&lt;/strong&gt; Is your database product fast?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bad Engineer:&lt;/strong&gt; Yes!  Our combination of advanced algorithms and cluster
computing let us scale to very large datasets.
Let me tell you about our GPU accelerated join algorithms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Bad Engineer continues on for a while until customer excuses himself awkwardly&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="good-engineer-listens-first"&gt;
&lt;h3&gt;Good.  Engineer listens first&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customer:&lt;/strong&gt; Is your database product fast?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Good Engineer:&lt;/strong&gt; Yes, in many ways, but I’m curious, why do you care
about speed?  I see that you work at an insurance company.  Is this for
analytics?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customer:&lt;/strong&gt; No actually.  While we do do lots of analytics, our main need
right now is to host queries for our website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Good Engineer:&lt;/strong&gt; Ah, so you’re looking for something like a key-value
database with query times under, say, 20ms?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customer:&lt;/strong&gt; Oh yes, anything under 50ms would be fine really.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Good Engineer:&lt;/strong&gt; OK great.  Yes, we can definitely help you with that.  I
normally talk about our GPU accelerated analytics database, but that’s
actually not a good fit for your use case.  Instead, let me show you our
transactionial database product.  I’m less familiar here, but I’m confident
that your use case fits right in here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Selling is much less about telling people what your product solves,
and is much more about listening to what problems other people have.
By listening you learn a lot about their situation.
This gives you a lot of insight into what they care about,
and helps you to match them to solutions more effectively.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="pain-points"&gt;
&lt;h2&gt;Pain Points&lt;/h2&gt;
&lt;p&gt;Our goal is to discover a customers’ pain point,
and then translate it into technical terms.&lt;/p&gt;
&lt;p&gt;For example their pain point might be that they’ve been tasked with
making the website faster because customers were dropping off due to long wait
times.&lt;/p&gt;
&lt;p&gt;They’ve tried to translate this pain point into a set of technical features
(fast database)
for which they are now on the lookout.
But they’re usually pretty bad at this, and so we need to learn a lot more
about them before we know how to help.
For example maybe they don’t need to invest in a new database product,
but instead they just need a progress bar, or better CSS on their webpage.&lt;/p&gt;
&lt;p&gt;If you can discover their pain point then
you’re much better equipped to solve their problem effectively.
If you identify a good product fit at this stage then selling is easy.
If you don’t then you’ve avoided a long and fruitless sales process.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Selling (or helping people generally) has much more to with learning about them
and having empathy than it does with talking about what yourself or your
product.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/engineering/engineers-and-sales/" rel="alternate"/>
    <summary>Engineer: Hey Boss, what should I know to more effectively sell our product?</summary>
    <published>2019-12-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/writing/brevity/</id>
    <title>Short attention span</title>
    <updated>2020-07-13T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="short-attention-span"&gt;

&lt;p&gt;Speaking truth is easy.  Getting people to listen is hard.&lt;/p&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This post talks about communicating effectively to a short attention span.
It lays out practical writing style advice to respect the reader through brevity.&lt;/p&gt;
&lt;p&gt;In particular, we discuss the construction and use of an &lt;em&gt;attention span budget&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ten-tips-for-keeping-attention"&gt;
&lt;h2&gt;Ten Tips for Keeping Attention&lt;/h2&gt;
&lt;p&gt;Let’s go through the following ten tips to establish reader trust and build attention span:&lt;/p&gt;
&lt;section id="tell-them-where-they-re-going"&gt;
&lt;h3&gt;1.  Tell them where they’re going&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Uncertainty causes stress.  Reduce reader stress.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Also, give them a roadmap in case they want to skip around.&lt;/p&gt;
&lt;p&gt;In this post we’re going to cover the following tips:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Tell them where they’re going&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Front-load content and results&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Break up long blocks of prose&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Earn and then burn attention span&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Say important things&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid boilerplate&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Acknowledge bias to build trust&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be brutally concise&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t fill time&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A worked example&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="front-load-content"&gt;
&lt;h3&gt;2. Front-load content&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Put the important bits first.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;More readers will start your post than will finish it, and those that finish it
will skim.&lt;/p&gt;
&lt;p&gt;You’ll notice that every section of this document includes a single line of
text at the top of the section.  This is because I know that you will skim,
and I want to make sure that you get the gist of my message, even if you don’t
stay around for the whole thing.&lt;/p&gt;
&lt;p&gt;Front-loading content helps us to earn the readers’ attention,
and helps make sure the reader gets our message,
even if we don’t achieve their attention for long.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="break-up-long-blocks-of-prose"&gt;
&lt;h3&gt;3. Break up long blocks of prose&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Humans like variety.  Switch between different visual elements every few lines.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By “visual elements” I mean things like the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Paragraphs of normal prose&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bulleted lists, like this one&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bold text&lt;/strong&gt; on a single line, or an indented quote&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code blocks (especially if you have colorful syntax highlighting)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Paragraphs or lists longer than four lines are often skipped.
However if you interleave paragraphs and bulleted sections,
or include some bold text lines and code blocks in there then people
find it more reasonable to go through, even if it’s the exact same content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interleaving style is an easy way to break things up.&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="deliver-lessons-after-earning-the-reader-s-attention"&gt;
&lt;h3&gt;4. Deliver lessons after earning the reader’s attention&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Win the listener’s respect before you ask for their time.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I arrive at content excited.  I’ve already clicked on a post or entered a
conference talk.  I’ve bought in.&lt;/p&gt;
&lt;p&gt;However, that excitement lasts about 20 seconds for a blog post or three
minutes for a conference talk.  It is within that time that we need to hook the
listener/reader and make them want to stay for longer.&lt;/p&gt;
&lt;p&gt;This looks different in different contexts:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;In a conference talk I often start out with a live demo.
Most people save this for the end of the talk,
but to me that seems like a missed opportunity to earn attention quickly.&lt;/p&gt;
&lt;p&gt;By seeing a flashy demo the audience is riveted and super-curious about how you achieved it.
They’ll hang on every word to figure out your magic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In a blog post you might put important results up front in the summary,
or start with your primary image.
You can include these results or images later in the post as well after you’ve built context,
but giving them dessert before the meal can help get them excited.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an analogy think about a child sitting down to play a game.  They’ll listen
for a little while to learn about the instructions, but you have to get playing
within a few minutes, or else they get agitated and leave.  If you can
manage it, design your game so that you can start playing right away.
Then, once they’re invested in the game and see that it’s fun you can get
pretty deep into the rules and they’ll be excited to learn more.&lt;/p&gt;
&lt;p&gt;We have to earn the listener’s attention before we can use it to teach them
things.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;small pet peeve, when writing talk slides try to avoid placing an “About me”
section at the front.  This burns one of your three minutes of starter
attention span.  The audience probably didn’t come to learn about you.&lt;/em&gt;)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="teach-something"&gt;
&lt;h3&gt;5. Teach something.&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Write for a reason.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My most popular blog posts were written in a state of controlled rage.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://matthewrocklin.com/blog/2019/02/28/slack-github"&gt;Why I Avoid Slack?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://matthewrocklin.com/blog/2019/05/18/maintainer"&gt;The Role of a Maintainer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://matthewrocklin.com/blog/work/2016/02/08/tests"&gt;Write tests.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These were conversations that I had had hundreds of times and wanted to have no longer.
I wanted to change the behaviors of people immediately around me.
They weren’t solving abstract problems or thinking broadly about what the world
might be.  No.  They were tightly scoped and specific and borne of great
internal turmoil.&lt;/p&gt;
&lt;p&gt;The key to a great blog post is to channel internal turmoil into a fair, balanced, and concise document.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="be-novel-avoid-boilerplate"&gt;
&lt;h3&gt;6.  Be Novel. Avoid Boilerplate.&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Most content generated by companies today is low-information.  Don’t copy their bad style.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Marketing professionals today employ ghost writers who translate a relevant
message into 1000 words.
Here is an example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Product Marketing team&lt;/strong&gt;: &lt;em&gt;We just released our new machine learning product that helps companies meet their cyber security needs.  We would like to raise awareness.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ghost writer&lt;/strong&gt;: &lt;em&gt;Sure. 1000 word blog post coming right up&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This becomes a long post about the company’s
history, the history of cyber-security, how machine learning has been used to
revolutionize other fields, and other things that readers have already read.
More often than not it’s a waste of time.&lt;/p&gt;
&lt;p&gt;If you’re new to writing, then you might be tempted to copy what you see.
This is safe, but I encourage you to develop your own style quickly.
Be brief, be genuine, and rework the same content a few times and you’ll
kick the crap out of ghost content within a few tries.
You don’t need to “try to look like a blog post”.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This applies to slide presentations, talks, and everything else too&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="stay-balanced-acknowledge-your-bias"&gt;
&lt;h3&gt;7.  Stay Balanced. Acknowledge Your Bias&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;The best way to establish trust is to acknowledge your bias&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Well, hey, I get paid if you buy this thing, so you probably shouldn’t trust me, but let’s dive into it and you can come to your own conclusions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Honesty is disarming and a wonderful way to establish connection.
It has the side benefit of being the right thing to do.&lt;/p&gt;
&lt;p&gt;My favorite example of this is our &lt;a class="reference external" href="https://docs.dask.org/en/latest/spark.html"&gt;Dask vs Spark&lt;/a&gt; documentation.
It’s informative and tries hard to be unbiased.
It also ends with this line, which we’ve gotten repeated praise for:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If you are looking to manage a terabyte or less of tabular CSV or JSON data, then you should forget both Spark and Dask and use Postgres or MongoDB.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;:)&lt;/p&gt;
&lt;p&gt;Also, staying balanced and honest will build self-respect.
We’re social animals, and being honest to our neighbors makes us feel fulfilled.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="be-brutally-concise"&gt;
&lt;h3&gt;8.  Be Brutally Concise&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Every word costs attention.  Remove unnecessary words.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="don-t-fill-time"&gt;
&lt;h3&gt;9.  Don’t fill time&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;When you’re done, be done.  Everyone appreciates getting time back.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="example"&gt;
&lt;h3&gt;10. Example&lt;/h3&gt;
&lt;p&gt;This is the last piece of material I was working on with a colleague about an upcoming webinar.
We’re going to show before and after:&lt;/p&gt;
&lt;section id="before"&gt;
&lt;h4&gt;Before&lt;/h4&gt;
&lt;p&gt;This Thursday at 5pm ET, we’ll be piloting our very first YouTube Live stream here at Coiled!&lt;/p&gt;
&lt;p&gt;We’ll be talking about scalable computing, when you want to do it and when you don’t, and doing some live Python coding to show you how to&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Use Dask to scale up your pandas code to larger datasets locally, in order to utilize all your cores on your laptop or local workstation and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Dask and Coiled to scale out your computation to a cluster on the cloud, when you need more cores than your laptop can provide.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll first chat about the general uses of distributed computing and how to figure out when you really need to use it (generally when you’re either RAM-bound or CPU-bound). We’ll then dive into using the now famous NYC taxi dataset and we’ll see how you can seamlessly move from pandas to dask to scale up computation, all within the comfortable environment of JupyterLab. The scalable dask code you write mimics the pandas API because, as we’ve written before, the social goal of dask was to “invent nothing” (we wanted to be as familiar as possible to what users already knew in the PyData stack).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="after"&gt;
&lt;h4&gt;After&lt;/h4&gt;
&lt;p&gt;Join us for Coiled’s first live stream!&lt;/p&gt;
&lt;p&gt;We’ll cover both the opportunities and the challenges of scaling data science workloads with Pandas using a real-world example:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Explore and clean a raw dataset with Pandas&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scale this workload locally with Dask&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scale this workload onto the cloud with Dask and Coiled&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Join us this Thursday 5pm US Eastern time as we encounter, triage,
and resolve common challenges that come with scaling data science in the real world.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="analysis"&gt;
&lt;h4&gt;Analysis&lt;/h4&gt;
&lt;p&gt;We’ve lost some content, but everything is a lot tighter.
The content that we lost wasn’t critical to our objective of informing the
reader that they should attend the webinar, or what the webinar would be about.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="extra-personal-anecdote"&gt;
&lt;h2&gt;Extra: Personal Anecdote&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;My first draft of this post had this section first, but I figured it wasn’t
that important, so I put it down here instead.  You can safely skip it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Teaching students taught me the value of writing to an attention budget.&lt;/p&gt;
&lt;p&gt;As a graduate student I taught computer science to technical non-majors
(physics/math/econ students mostly).  Students participated in practical
sessions in the computer lab where they would read a set of instructions and
then proceed to work through projects with us behind them.&lt;/p&gt;
&lt;p&gt;The instructions looked like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Today we’re covering object oriented programming and classes.  A class looks
like this:&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Human&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;In our next exercise you will extend this class to …&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;And so on.  When I wrote bad instructions, all of the students would have lots
of problems, and the lab was stressful for me.  When I wrote good instructions the
students would be fine and I could relax and joke around with them (scientists
who choose to learn programming are invariably great to be around).&lt;/p&gt;
&lt;p&gt;To be clear the difference between “good” and “bad” instructions wasn’t in the
content, it was whether or not the student actually read through all of the instructions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Teaching is a game where you have to capture someone’s attention while
simultaneously shoving knowledge into their brain.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thank you to &lt;a class="reference external" href="https://hugobowne.github.io/"&gt;Hugo Bowne-Anderson&lt;/a&gt; for his thoughtful remarks on this post&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/writing/brevity/" rel="alternate"/>
    <summary>Speaking truth is easy.  Getting people to listen is hard.</summary>
    <published>2020-07-13T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/writing/tweet/</id>
    <title>Ideal Tweet</title>
    <updated>2020-08-18T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="ideal-tweet"&gt;

&lt;p&gt;Tweets, like all writing, should respect the reader through brevity and structure.&lt;/p&gt;
&lt;section id="caveats"&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;First, I’m mostly talking about professional tweets, and less about pictures of
family outings, cute cats, or hilarious memes.  If that’s how you use Twitter,
then please disregard this post (or make fun of it with a hilarious meme).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="example-tweet"&gt;
&lt;h2&gt;Example Tweet&lt;/h2&gt;
&lt;p&gt;Of my last few tweets, I think that this best exemplifies brevity and structure.&lt;/p&gt;
&lt;img alt="https://matthewrocklin.com/blog/images/tweet-video.png" src="https://matthewrocklin.com/blog/images/tweet-video.png" style="width: 50%;" /&gt;
&lt;/section&gt;
&lt;section id="what-i-like-about-this-structure"&gt;
&lt;h2&gt;What I like about this structure&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;It starts with a short, single-line explanation, followed by a line break.&lt;/p&gt;
&lt;p&gt;People skim, especially on Twitter.
We need to get to the point immediately.
The line break helps the eye focus on the summary/hook,
and buys us a little bit of attention
while the reader decides if they want to read more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It then delivers actual novel content&lt;/p&gt;
&lt;p&gt;After you’ve hooked the reader you can deliver some novel information.
Here we follow with an enumerated list,
including actual novel information like prices.
Readers learn something on the internet, huzzah!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is clickable link with an image&lt;/p&gt;
&lt;p&gt;Tweets with clickable images seem to get shared more often.
I’m not a fan of including stock photos just for click bait (this
disrespects the reader in my opinion), but if you are linking to a blogpost
or video, it’s nice if SEO is active enough to have a clickable thing on
the bottom.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deliver personalized opinions at the end&lt;/p&gt;
&lt;p&gt;As a social medium, Twitter is slightly more personal than a blogpost.
When I write a blog I try to remain neutral and precise (arguably too much
so).  On Twitter I don’t mind stating the occasional personal opinion or
bias.  I think that a subtle tint of personality makes me feel better about
my tweets, and maybe improves engagement too.&lt;/p&gt;
&lt;p&gt;People like it when humans act like humans sometimes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="things-to-avoid-in-my-opinion"&gt;
&lt;h2&gt;Things to avoid (in my opinion)&lt;/h2&gt;
&lt;p&gt;I personally filter out most tweets that are half &lt;span class="xref myst"&gt;#hashtags&lt;/span&gt; and
&lt;span class="xref myst"&gt;&amp;#64;mentions&lt;/span&gt;.
In my experience these are usually written by professional marketing folks, and
I’ve learned to associate a bit less value to these tweets.&lt;/p&gt;
&lt;p&gt;Of course, there is a trade off here.  Accounts that are explicitly mentioned
are more likely to retweet.  Tagging influencers feels cheap, but can
sometimes be effective.  Personally, I like adding them in replies at the
bottom “Hey &amp;#64;famousperson, I was thinking of your post … when writing this
up. I’d love to know if you have thoughts.”  In general I think that
self-replies are a great way to avoid packing too much into the header tweet,
while still engaging other folks that you want to engage.&lt;/p&gt;
&lt;p&gt;Separately, I also think,
perhaps unusually,
that the normal rules of writing apply.
I avoid walls of text, abbreviations, internet shorthands, and so on.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="engagement"&gt;
&lt;h2&gt;Engagement&lt;/h2&gt;
&lt;p&gt;I think that these suggestions make it easier to scan and abosrb,
which I think eventually lead to improved engagement.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/writing/tweet/" rel="alternate"/>
    <summary>Tweets, like all writing, should respect the reader through brevity and structure.</summary>
    <published>2020-08-18T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/startups/metrics/</id>
    <title>Metrics</title>
    <updated>2020-10-28T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="metrics"&gt;

&lt;p&gt;Common open source software (OSS) / venture capital (VC) metrics are flawed.
This surprises no one; metrics are hard.&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="https://coiled.io"&gt;starting a company&lt;/a&gt;
around a pre-existing community OSS project,
&lt;a class="reference external" href="https://dask.org"&gt;Dask&lt;/a&gt;,
I’ve had many conversations on this topic.
I’d like to share two prototypical conversations that show the need for nuance below.
One about hockey stick growth, and the other about GitHub stars.&lt;/p&gt;
&lt;section id="startup-founder-asks-about-hockey-stick-growth"&gt;
&lt;h2&gt;Startup Founder asks about Hockey Stick Growth&lt;/h2&gt;
&lt;p&gt;Another startup founder wanted to drive adoption to his product by creating an
open source project that quickly took off and was curious about how to rapidly
get project-market fit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SF:&lt;/strong&gt; &lt;em&gt;Dask seems really successful.  How did you quickly get traction with the open source community?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; &lt;em&gt;We didn’t.  Dask is the result of six years of listening and diligent community service.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full community-based OSS timeline doesn’t make make sense for a for-profit company.&lt;/p&gt;
&lt;p&gt;He went on to ask about rapid, hockey-stick growth.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SF:&lt;/strong&gt; &lt;em&gt;Well, along that journey, what happened that cause you go finally achieve hockey-stick growth?&lt;/em&gt;&lt;/p&gt;
&lt;img src="http://blogs-images.forbes.com/sageworks/files/2016/10/HSP_Graphic1_11_16-2-e1477181247697.jpg" width="60%"/&gt;
(Image source,
[Forbes](https://www.forbes.com/sites/sageworks/2016/10/23/navigating-the-make-or-break-years-as-you-create-hockey-stick-growth/#764356305ed7))
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; &lt;em&gt;Never.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dask grew organically.  See my post on &lt;a class="reference external" href="https://blog.dask.org/2020/01/14/estimating-users"&gt;Estimating Users&lt;/a&gt; and our weekly unique IPs to API documentation (my preferred metric)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="Dask weekly users on documentation" src="https://blog.dask.org/images/dask-weekly-users.png" style="width: 100%;" /&gt;
&lt;p&gt;I usually call this growth curve “organic growth” or “natural growth”,
which I think reflects a far more stable community of users with deep
understanding between the user and developer communities.&lt;/p&gt;
&lt;p&gt;We need to find a way to make organic growth cool again.  Rather than
Hockey-stick growth we can call this &lt;strong&gt;Scimitar growth&lt;/strong&gt;?  :)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="venture-capitalist-asks-about-github-stars"&gt;
&lt;h2&gt;Venture Capitalist asks about Github Stars&lt;/h2&gt;
&lt;p&gt;In another conversation a VC investor trying to evaluate Dask’s popularity asks
about GitHub stars.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VC:&lt;/strong&gt; &lt;em&gt;So how popular is Dask?  How many GitHub stars do you have?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; &lt;em&gt;It’s hard to count, as an ecosystem project Dask affects dozens of other projects.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We also don’t spend our time trying to collect stars&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VC:&lt;/strong&gt; &lt;em&gt;Yeah, but how many stars?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; &lt;em&gt;Sigh, maybe 7k in the main repo, 2k each in a few sub-repos,
and then another 5k each across various sister projects like RAPIDS, Prefect,
Xarray, …?&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VC:&lt;/strong&gt; &lt;em&gt;I guess that’s ok&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; &lt;em&gt;But a better metric is probably that 5% of Python users use Dask
(according to the PSF survey, which is biased towards people who care).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So any company that has 20 Python users has a decent chance of using Dask
internally.  Apache Spark is 2-3x higher, Apache Hadoop slightly higher,
and Apache Hive slightly less, Apache Beam about 5x less.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dask is by far the most popular non-JVM parallel computing framework in Python ever made.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VC:&lt;/strong&gt; &lt;em&gt;Oh.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="https://mk0coiled27knr0w73eb.kinstacdn.com/wp-content/uploads/dask-users-psf-survey-white-on-black.png" src="https://mk0coiled27knr0w73eb.kinstacdn.com/wp-content/uploads/dask-users-psf-survey-white-on-black.png" style="width: 80%;" /&gt;
&lt;p&gt;I don’t know a better metric than GitHub stars that one can get immediately on the open internet.
I don’t envy investors.  Rapidly assessing the commercial potential of highly
technical software is hard.  It’s rare to find individuals with dual
expertise in distributed systems and business acumen.&lt;/p&gt;
&lt;p&gt;Still, the star metric makes me less-than-happy.  It’s a measure of hype, not of use, or of utility.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="thoughts"&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;In the specific case of Dask, hockey stick growth among users is no longer
possible.  We’ve reached &lt;em&gt;user&lt;/em&gt; penetration that’s already pretty high (the 5%
number is for &lt;em&gt;all&lt;/em&gt; Python users, including web developers, and people who will
never touch big data).  The thing to think about now is &lt;em&gt;company&lt;/em&gt; adoption.
Just because some data scientist is using Dask inside of every Fortune 50
company doesn’t mean that those companies use Dask throughout.  That metric is
harder though.&lt;/p&gt;
&lt;p&gt;Regarding stars, most of the excitement around Dask today is indirect.  It’s for
sister projects like RAPIDS, Prefect, Pangeo/Xarray, XGBoost, and so on that
Dask supports.  As a &lt;em&gt;community&lt;/em&gt; project, Dask tries hard to blend in
and support peer projects.  This integration is the strength of community
software.  Dask and many other OSS projects strengthen the collective weave of
PyData.  We’re less like a monolith, and more like carbon fiber.  Hat tip to
similar computational projects Arrow, RAPIDS, Numba, and Numpy all of whom work
tirelessly on standards and open integration.&lt;/p&gt;
&lt;p&gt;I fundamentally believe that pragmatic sustainable software is better built
organically and collectively.  I am curious what metrics might capture these
more community-supportive behaviors.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/startups/metrics/" rel="alternate"/>
    <summary>Common open source software (OSS) / venture capital (VC) metrics are flawed.
This surprises no one; metrics are hard.Dask weekly users on documentation</summary>
    <published>2020-10-28T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/engineering/technical-lead/</id>
    <title>Tech Leads</title>
    <updated>2021-06-24T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="tech-leads"&gt;

&lt;section id="what-is-a-technical-lead"&gt;
&lt;h2&gt;What is a technical lead?&lt;/h2&gt;
&lt;p&gt;Tech lead is a role for senior engineers that provides some of the leverage of
management, while avoiding most of the administrative burden.  It’s a fun role.
This post talks about some positive behaviors to think about should you find
yourself in this role.&lt;/p&gt;
&lt;p&gt;As the name suggests, tech leads &lt;em&gt;lead&lt;/em&gt; larger technical efforts.
They work with a team, but typically don’t formally manage anyone.
The team looks up to them and it’s their job to steer the effort technically,
while typically only using the soft power of generally knowing what they’re
doing.&lt;/p&gt;
&lt;p&gt;It’s a really fun role.  I spent most of my time as a tech lead while at Anaconda, and serve
in that capacity to some extent in OSS communities.  I wanted to share some of
the positive behaviors that I think make for a good tech lead.&lt;/p&gt;
&lt;p&gt;So, what can a good tech lead do?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tech-lead-behaviors"&gt;
&lt;h2&gt;Tech lead behaviors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Solve Hard Problems&lt;/strong&gt;: as a start, you have to be an excellent developer.
You’re going to have to rescue your teammates from difficult bugs,
and tackle the core bits of whatever you’re building.&lt;/p&gt;
&lt;p&gt;But if you want to solve hard problems then stay a senior engineer.
Technical leadership is about guiding rather than executing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Avoid Hard Problems&lt;/strong&gt;: save your team time by pointing them towards
simple solutions when they suffice.&lt;/p&gt;
&lt;p&gt;A team lead has to provide paths to solutions that the rest of the team can
easily implement.  Finding easy solutions is hard.&lt;/p&gt;
&lt;p&gt;A team lead often has to say &lt;em&gt;“OK, I can see that your solution works well,
but I wonder if we can make it simpler by doing X.  This will probably help
down the line with future maintenance.”&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Avoid Technical Debt&lt;/strong&gt;: leading a large effort is like playing chess.
You make individual moves, but you think ahead about the ramifications of
those moves.&lt;/p&gt;
&lt;p&gt;If the team has to spend time dealing with, or paying down technical debt
then that’s your fault.  You should think about simple and extensible designs,
so that your teammates can solve individual problems that robustly lead to
an efficient solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Break large problems down into small ones&lt;/strong&gt;: building something
yourself is easy.  Breaking down a large thing into small things that many
people can develop on at once in parallel is hard and requires thoughtful
design.&lt;/p&gt;
&lt;p&gt;In some sense, a technical lead is able to realize the “mythical man-month”
by finding a path through the problem that exposes enough concurrency to
enable acceleration through parallelism.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Scope problems for your team:&lt;/strong&gt; a small amount of scoping and support
work from you can
often save your teammates long hours of work.  This can take many forms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Presenting a problem in context&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide a recommended approach, and pointers to relevant pieces of the
code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tests that you think should pass that encode important behavior or make
the API clear&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you know, a lot of software development time is spent understanding
design, and exploring wrong paths.  You’re probably faster at this than
your teammates, and so it’s a highly productive activity for you.
By providing enough detail up-front you can reduce uncertainty, stress, and
delays from your teammates’ work, which they will appreciate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know your team:&lt;/strong&gt; In order to properly scope and describe tasks for your
teammates you need to know their technical capabilities and preferences
pretty well.  This arises in two components:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You can match problems to teammates based on interest.  People do a
better job on problems that excite them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can provide more or less detail based on their experience with
these kinds of problems.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Explain your thought process:&lt;/strong&gt; It’s not enough to say “here is a test
and a design, please implement it”.  Remember that you’re not in charge of
anyone here.  Instead, you lead by providing explanation and context on why
you think a certain path is best.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt; Please use algorithm X here rather than Y.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt; I suspect that algorithm Y here will not perform well when we
have many users.  I think that it’s O(n^2), which is fine for the test
cases that we have here, but given that we’re expecting 10k
simultaneous users and the cost here seems to be about 5us, this turns
into &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;5us&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;10k&lt;/span&gt; &lt;span class="pre"&gt;**&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;10&lt;/span&gt; &lt;span class="pre"&gt;minutes&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead, I think that algorithm X might be a better fit.  It’s a bit
slower when we have very few users, but should scale much better.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a couple of reasons for this.  First, keep in mind that you’re
not in charge.  Overly aggressive tech-leads are unpleasant to work with.&lt;/p&gt;
&lt;p&gt;Second, you’re supposed to teach your understanding of the system onto
your coworkers, and help them progress professionally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Advocate for teammates:&lt;/strong&gt; tech leads are unique in that they&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;have respect and clout in the company&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;have a lot of direct experience with individual engineers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;aren’t technically responsible for anyone&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As a result they are often the best source of information about who is
doing well.  While you don’t have direct budget authority to give raises or
promotions, you do have &lt;em&gt;soft power&lt;/em&gt; and can advocate for great teammates.&lt;/p&gt;
&lt;p&gt;Conversely, you also know when someone isn’t working out in the team,
and can work to address problems quickly before they become serious issues.&lt;/p&gt;
&lt;p&gt;A tech lead is like a cool aunt/uncle.  People say things to them that they
wouldn’t say to siblings or parents, and they’re disconnected enough to
easily give insightful feedback.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Communicate directly to stakeholders:&lt;/strong&gt; a good tech lead
can talk directly to other parts of the company (product, sales, marketing).
They’re also often called in to deal with important clients.&lt;/p&gt;
&lt;p&gt;Because of this, tech leads need to be able to turn on a certain level of
professionalism, and also understand the non-technical needs of others.
They need to understand why the work that they do is important to people.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Listen, and avoid ego:&lt;/strong&gt; because of this, tech leads need to listen,
and have very little ego when it comes to technical work
(I personally need to work on this).&lt;/p&gt;
&lt;p&gt;Rockstar developers tend to make poor tech-leads (but awesome senior engineers).&lt;/p&gt;
&lt;p&gt;Instead the best tech leads I know are able to tell you what course of
action they think is best one minute, and then have their mind changed
entirely the next minute.  This is often developed with age, or with
experience working on technical projects where they are wrong (which
happens often if you pay attention).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Respect senior engineers:&lt;/strong&gt; Tech leads often work alongside other senior
engineers who may have more experience as developers, but don’t care to
direct the work of others.  It’s important to remember that these people
are often smarter than you, and seek their technical opinion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Respect junior engineers:&lt;/strong&gt; Tech leads often dispense critical feedback
about code to junior engineers.  This puts them at risk of appearing to be
jerks.  Good tech leads study human management skills, and how to deliver
feedback in particular.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="oss-maintainers-make-good-tech-leads"&gt;
&lt;h2&gt;OSS Maintainers make good Tech Leads&lt;/h2&gt;
&lt;p&gt;The role of having a lot of technical context, trying to direct many others
along a shared technical vision, but not actually having authority over anyone
is a role familiar to many OSS maintainers.  There is excellent cross-over
between these two positions.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/engineering/technical-lead/" rel="alternate"/>
    <summary>Tech lead is a role for senior engineers that provides some of the leverage of
management, while avoiding most of the administrative burden.  It’s a fun role.
This post talks about some positive behaviors to think about should you find
yourself in this role.</summary>
    <published>2021-06-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/programming/fast-review/</id>
    <title>Small Scope Reviews</title>
    <updated>2022-03-26T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="small-scope-reviews"&gt;

&lt;p&gt;This is a &lt;a class="reference external" href="https://matthewrocklin.com/blog/work/2019/06/25/write-short-blogposts"&gt;fast blogpost&lt;/a&gt; please excuse the brevity.&lt;/p&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A fast review and merge cycle is incredibly valuable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When reviewing, consider highlighting which comments are obligatory because
they stop some regression, and which are merely commendable because they
would add some enhancement&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t forget that better is the enemy of good, especially when prioritizing
against all of the other work that can get done.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;As an OSS developer I use many projects, and when I see a simple problem in a project that I can fix quickly, I like to fix it.
For a trivial example, maybe I decide to add a type annotation to a function:&lt;/p&gt;
&lt;div class="highlight-diff notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;-def ensure_bytes(s):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+def ensure_bytes(s) -&amp;gt; bytes:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;&amp;quot;&amp;quot; Turn string or bytes to bytes&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;    &amp;gt;&amp;gt;&amp;gt; ensure_bytes(&amp;#39;123&amp;#39;)&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    b&amp;quot;123&amp;quot;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Awesome.  This takes me less than two minutes to make the fix and open a pull
request.  I can fire this off and proceed with my normal work.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="critical-review"&gt;
&lt;h2&gt;Critical review&lt;/h2&gt;
&lt;p&gt;On review, someone might helpfully mention that I actually made a mistake, and
that this function can also return &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;None&lt;/span&gt;&lt;/code&gt; in some cases.  They make the
following suggestion:&lt;/p&gt;
&lt;div class="highlight-diff notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;-def ensure_bytes(s):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+def ensure_bytes(s) -&amp;gt; bytes | None:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;&amp;quot;&amp;quot; Turn string or bytes to bytes&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;    &amp;gt;&amp;gt;&amp;gt; ensure_bytes(&amp;#39;123&amp;#39;)&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    b&amp;quot;123&amp;quot;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is great!  They helped me to understand the problem better, and avoid
doing something harmful to the project.  The back-and-forth here takes a few
minutes, and pushing a new commit takes a few minutes, but I’m still happy to
do this, and I learned something along the way.  I’m not thrilled about
stopping my normal work to do this, but it makes total sense.  We need to
make sure that things are correct.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="non-critical-review"&gt;
&lt;h2&gt;Non-critical review&lt;/h2&gt;
&lt;p&gt;Another reviewer then arrives and suggests that I also type the inputs, and
change the docstring to reflect the ambiguous typing.&lt;/p&gt;
&lt;div class="highlight-diff notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;-def ensure_bytes(s):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="gi"&gt;+def ensure_bytes(s: str | bytes | None) -&amp;gt; bytes | None:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;&amp;quot;&amp;quot; Turn string or bytes to bytes&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;    Except if the input is none, in which case it passes through&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;    &amp;gt;&amp;gt;&amp;gt; ensure_bytes(&amp;#39;123&amp;#39;)&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    b&amp;quot;123&amp;quot;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is a good idea!  Someone should do this!  However, I don’t think that it
necessarily has to be me.  Also, I’m off doing other work, and this is becoming
more of a distraction.&lt;/p&gt;
&lt;p&gt;Maybe I do this anyway (it’s not hard) but I’m probably less likely to come back here in the future.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="distinguish-between-critical-bugs-and-nice-to-have-enhancements"&gt;
&lt;h2&gt;Distinguish between critical bugs and nice-to-have enhancements&lt;/h2&gt;
&lt;p&gt;It’s great to make suggestions on PRs for enhancements or how things might be
improved.  However, we should always remember to mark them as optional for PR
authors.&lt;/p&gt;
&lt;p&gt;We can always come back and add the enhancements ourselves after their
improvements are already in.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="prioritize-ruthlessly"&gt;
&lt;h2&gt;Prioritize ruthlessly&lt;/h2&gt;
&lt;p&gt;However, when we switch out of review mode, and into authoring mode, we might
realize that the enhancements aren’t actually as important as what we were
planning to work on.  If they’re not something that we’re likely to prioritize
ourselves, then we definitely shouldn’t have been requiring someone else to do
this work for us.&lt;/p&gt;
&lt;p&gt;This is especially true in a professional context, where time is in short
supply.  Many of us come from a volunteer context, where working on code and
reviewing is a free thing that we ourselves donate or that we do for fun.
However, in a professional context this is often not true, and the
back-and-forth on a PR has very concrete costs (easily rising into the
thousands of dollars).  At work we prioritize with our teams to make sure that
we’re using our time wisely, but we often forget about this prioritization
process when we enter review mode.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="parable"&gt;
&lt;h2&gt;Parable&lt;/h2&gt;
&lt;p&gt;Imagine that you need to travel from home into the city.  It’s a long distance but
a beautiful day outside, and so you decide to walk.  You’re moving quickly so
that you can get there and back before sunset.&lt;/p&gt;
&lt;p&gt;You start walking swiftly towards your goal, but along the way you spot a piece
of trash.  You’re a good citizen and so you pick up that trash so that you can
put it in the bin the next time you see one.&lt;/p&gt;
&lt;p&gt;As you approach a trash bin to put the trash away someone stops you and points
out that this bin was actually for recycling.  They helpfully point you to the
trash bin across the road.  You thank the good citizen for stopping you from
making a mistake, and bring the trash to the appropriate place.&lt;/p&gt;
&lt;p&gt;A few folks around the trash bin notice that you’re cleaning up the streets,
and point you to more trash that you can pick up.  That’s fine, you’re happy to
help out, and so you pick up some more trash to clean up.  They get excited
about this and point you down a side road that needs even more cleaning.&lt;/p&gt;
&lt;p&gt;You’re not feeling great about this, you need to get to town and back, and
daylight is running out.  These kind folks are well meaning, but they’ve
mistaken your intent as “clean up the streets” rather than “get to town”.
You calmly explain to them that you’re not actually here to clean up the
streets, explain that you’re headed to town to get medicine for your family,
and that you really must be off.  Now that you’ve explained your context they
fully understand your situation and indeed encourage you on your way, perhaps
even pointing you to a bus line that you didn’t know existed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="id1"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/mrocklin.github.io/mrocklin.github.io/programming/fast-review.md&lt;/span&gt;, line 144); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “summary”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;As we as OSS developers shift to doing professional open source maintenance we
need to shift how we think a little.  Open source is amazing at having strong
impact, and at collaboration, but often lacks the focus or direction of
professional software engineering shops.  We should think about how we bring
the focus of professional work into our open source development practices.&lt;/p&gt;
&lt;p&gt;A great and ubiquitous example of this is PR review, which is a common source
of scope creep, and often in directions that are not primary foci of the team.&lt;/p&gt;
&lt;p&gt;Fast PRs also feel great, we should do more of those, if we can keep them safe.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Total write time: 21 minutes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Total edit and publish time: 2 minutes&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/programming/fast-review/" rel="alternate"/>
    <summary>This is a fast blogpost please excuse the brevity.</summary>
    <published>2022-03-26T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/startups/startup-revenue/</id>
    <title>Revenue Types</title>
    <updated>2022-07-25T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="revenue-types"&gt;

&lt;p&gt;VC funded startups are weird.
They (rightly) care more about valuation than about revenue.
Valuation depends on revenue, but only on very certain kinds of revenue.&lt;/p&gt;
&lt;p&gt;The simplified version of this is that there are two kinds of revenue:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Services (bad)&lt;/strong&gt; one-off consulting work that is easy to get but has little to do with making a scalable business&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Recurring Product Revenue (good)&lt;/strong&gt; annually recurring revenue with little to no marginal cost and great scalability&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I agree with this assessment, but I think that it over-simplifies things a bit.
This blog goes through a variety of different kinds of revenue that I think are
different kinds of good and bad.  Throughout these examples I draw from on my
single experience selling open source software in the data infrastructure space.&lt;/p&gt;
&lt;section id="consulting-services"&gt;
&lt;h2&gt;Consulting Services&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Customer: Please join my team and help us use your software to solve our problem&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Not Scalable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not Dependable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maybe informs future product development&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think that this activity is actually great when you’re starting out.
There’s no better way to understand customer pain points than figuring out what
they’re willing to pay for and working closely with them.&lt;/p&gt;
&lt;p&gt;Of course, one needs to be careful that we’re learning from this experience,
rather than just chasing money (although that’s ok too if you’re doing it
intentionally).&lt;/p&gt;
&lt;p&gt;Typically these contracts are hourly.  I’ve seen rates anywhere from &lt;em&gt;$150/hr&lt;/em&gt; to
&lt;em&gt;$1000/hr&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="funded-development"&gt;
&lt;h2&gt;Funded Development&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Customer: I love your software.  Can I pay you to add a feature?&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Not scalable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not dependable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports product development&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This work is probably great.  Someone cares enough about your software to pay
you to improve it.  They don’t want you mucking about in their systems
(awesome) but do want to prioritize things on your roadmap a bit.  This can be
either good signal (customers pointing you in the right direction) or
distracting (customers pointing you in a bad direction).  Additionally, because
this work isn’t very dependable it’s hard to build a team around it (at least
not a team that needs to be dependably employed)&lt;/p&gt;
&lt;p&gt;Typically these are one-off fixed-price contracts.  I’ve seen contracts from
&lt;em&gt;$50,000&lt;/em&gt; to &lt;em&gt;$1,000,000&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="support"&gt;
&lt;h2&gt;Support&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Customer: I want insurance that things won’t break&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pretty Scalable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pretty Dependable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kinda supports product development&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once your software is endemic within an organization they’re going to want
someone to be on the hook for it.  We do this by providing a private issue
tracker, SLAs on critical bugs, and a person to talk to from time to time.  We
also offer things that no one uses like indemnity insurance.&lt;/p&gt;
&lt;p&gt;The beautiful thing here is that if your software works perfectly then this is
free to provide.  Your software doesn’t work perfectly, so this isn’t free, but
fortunately all of these customers typically ask for the same things, so it
scales pretty well.  It’s also pretty dependable, so it’s easy to hire people
and rest assured that you can continue to employ them.&lt;/p&gt;
&lt;p&gt;For enterprise customers these are typically anywhere from &lt;em&gt;$100,000&lt;/em&gt; to
&lt;em&gt;$1,000,000&lt;/em&gt;, at least at the Series Seed/A size.  Multi-million dollar deals of
this nature are doable between larger companies.  I typically have to convince
business people that this is ARR, despite the fact that it’s definitely
annually recurring revenue.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="product-hard-to-deploy"&gt;
&lt;h2&gt;Product (hard to deploy)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Customer: I want your product, but need it in my environment, like Cloudera&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pretty Scalable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Very Dependable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports product development (but painfully)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hooray product revenue!  This is the first thing that you don’t have to
convince VCs to count as ARR.  It might actually still be a pain in the butt
though.&lt;/p&gt;
&lt;p&gt;Products are often hard to deploy within customer settings.  Big customers have
lots of custom systems that are hard to work with, and you’ll be asked to work
with them.  That’s ok, you can hire a team that just does this work and you can
charge for their time.  There are other challenges, like supporting old
versions of the software, getting clear bug reports on your software when you
may not have permissions to touch that software directly, etc..&lt;/p&gt;
&lt;p&gt;Fortunatley though, the world has also improved since the days of Cloudera.
Technologies like Kubernetes and “on-prem cloud” reduce (but don’t eliminate)
this pain.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="product-cloud-saas"&gt;
&lt;h2&gt;Product (cloud SaaS)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Customer: I want your product, and don’t mind if you see my data, like Snowflake&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Very Scalable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dependable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports product development (and joyfully)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hooray product revenue attached to a system over which you have full visibility!
Cloud SaaS is considered to be the highest velocity approach because once it
works it’s easy to scale out to lots of customers with low effort.  Of course,
it may be &lt;em&gt;really&lt;/em&gt; hard to get to that point.  You’ll have to get good at
convincing customers that your internal systems are safe.  This will be easy in
some sectors (SMBs, non-sensitive industries) but harder in others (Large
Enterprise, finance, government, etc.).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Money is good.  Dependability is good.  Learning is good.&lt;/p&gt;
&lt;p&gt;All of these activities are good in some ways and bad in others.  Rather than
say services are bad and product is good we should be asking questions about
how scalable, dependable, high margin, and in line with your product
development they are.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/startups/startup-revenue/" rel="alternate"/>
    <summary>VC funded startups are weird.
They (rightly) care more about valuation than about revenue.
Valuation depends on revenue, but only on very certain kinds of revenue.</summary>
    <published>2022-07-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/startups/over-grown/</id>
    <title>Over Grown</title>
    <updated>2022-08-09T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="over-grown"&gt;

&lt;p&gt;I’ve intentionally shrunk Coiled from 40 to 20 people.
This was painful, but we’re moving faster as a result.
This article talks a little about the context around this.&lt;/p&gt;
&lt;section id="common-failure-mode-for-startups"&gt;
&lt;h2&gt;Common failure mode for startups&lt;/h2&gt;
&lt;p&gt;First, let’s acknowledge a common trope for startups:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Innovate to modest success&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Raise a large venture round&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fail to deliver&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Experience financial stress&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contract&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This isn’t our story, but it would have been given time.
I’m fearful that it will be the story for many startups that raised
during the funding boom last year.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="startups-over-raised-last-year"&gt;
&lt;h2&gt;Startups over-raised last year&lt;/h2&gt;
&lt;p&gt;Last year funding was easy.
Many of us raised generous rounds,
probably well before we could use the cash.&lt;/p&gt;
&lt;p&gt;We hired lots of smart people thinking that more smart people would make us go
faster.  This wasn’t my experience.  My experience was that adding more smart
people was bad in two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Increased inertia making it harder to perform the rapid pivoting that’s necessary for a young company&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Increased intra-organizational burden, creating lots of work to integrate many working cultures&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="innovation-is-king-large-organizations-don-t-innovate-well"&gt;
&lt;h2&gt;Innovation is king.  Large organizations don’t innovate well.&lt;/h2&gt;
&lt;p&gt;We’ve all experienced this personally.  When we walk down a street with a
single friend we walk quickly, even if we need to navigate around an obstacle
like a construction site.  When we walk down the same street with a gang of
many friends we’re slow, and a construction site can become insurmountable.&lt;/p&gt;
&lt;p&gt;Early stage startups are like navigating an entire city under construction,
everyone needs to be able to pivot together at a moment’s notice.  Large groups
require a lot of social work in order to pivot.  This work can become
debilitating.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="fortunately-we-did-this-early"&gt;
&lt;h2&gt;Fortunately we did this early&lt;/h2&gt;
&lt;p&gt;We’re back at large-seed size with a generous many-year runway.
We’re open to hiring folks, but only if we actively need their skillset and if
we think that they’re a good culture fit for early-stage work (self-directed
broadly-skilled folks).
We’re not so interested in additional funding just now, we’ve got plenty of cash.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="back-to-work"&gt;
&lt;h2&gt;Back to work&lt;/h2&gt;
&lt;p&gt;My calendar is clear of meetings, the team is aligned, and I am glad to be back
to thinking about users, technology, and communication.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/startups/over-grown/" rel="alternate"/>
    <summary>I’ve intentionally shrunk Coiled from 40 to 20 people.
This was painful, but we’re moving faster as a result.
This article talks a little about the context around this.</summary>
    <published>2022-08-09T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/engineering/user-valued-work/</id>
    <title>User Valued Work</title>
    <updated>2022-08-24T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="user-valued-work"&gt;

&lt;p&gt;We often need to balance prioritization between user-facing work and internal
or developer-facing work.  It’s helpful to distinguish between these in
conversations of prioritization and measuring success.&lt;/p&gt;
&lt;section id="id1"&gt;
&lt;h2&gt;User-valued work&lt;/h2&gt;
&lt;p&gt;This is work that directly affects users.  It solves their pain and gives them
a delightful experience.  It includes work like the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Features that solve user pain&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Features that delight users&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Documentation that many people read and engage with&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Directly answering user questions&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="developer-valued-work"&gt;
&lt;h2&gt;Developer-valued work&lt;/h2&gt;
&lt;p&gt;This is work that mostly developers see.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Paying down technical debt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixing CI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing well thought out technical documentation, even if it isn’t widely read&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Discovering bugs or problems in the system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing design documents&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developing features behind a feature flag&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developing features but not releasing them or releasing them only very recently so that most users don’t have them yet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Benchmarking to track success and avoid regressions&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Developer valued work is valuable, but only in that it makes us faster in
delivering user-valued work to users.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="timing-and-judgement"&gt;
&lt;h2&gt;Timing and Judgement&lt;/h2&gt;
&lt;p&gt;We are judged as a team on user-valued work in the long term.
Developer-valued work is good, but only in service of helping us to perform
user-valued work more effectively.
It’s great to do developer-valued work for a week or a month, but beyond that
it comes into question.&lt;/p&gt;
&lt;p&gt;In a professional context when upper-management judges the performance of a
team, user-valued changes are typically what matter.  This matches how the
public judges our work.&lt;/p&gt;
&lt;p&gt;Usually a well-functioning team will do both.  Focusing entirely on
user-focused work tends to be a sign that the team is under short-term
pressure.  Focusing entirely on developer-focused work for months at a time may
be a sign that the team lacks a strong prioritization function.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/engineering/user-valued-work/" rel="alternate"/>
    <summary>We often need to balance prioritization between user-facing work and internal
or developer-facing work.  It’s helpful to distinguish between these in
conversations of prioritization and measuring success.</summary>
    <published>2022-08-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/startups/best-practices/</id>
    <title>Best Practices</title>
    <updated>2022-09-05T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="best-practices"&gt;

&lt;section id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;After building a successful open source project I then started a company and made many mistakes.&lt;/p&gt;
&lt;p&gt;Some folks on this path foolishly ask for my advice.
This article encodes some of that advice.&lt;/p&gt;
&lt;p&gt;It is intended for technical founders who have no experience building companies.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="most-advice-is-wrong"&gt;
&lt;h2&gt;Most Advice is Wrong&lt;/h2&gt;
&lt;p&gt;Many people will offer you advice:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Investors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angel investors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Business partners&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fractional CTO/CMO/COO/CRO folks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other founders (like me)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re all mostly wrong.  That’s not because we’re dumb (we’re mostly not dumb)
but our experiences were valid for our situations, and they probably don’t
transfer over to yours.&lt;/p&gt;
&lt;p&gt;Early stage companies are all pretty unique, and it may be that there isn’t a
lot of transferability of knowledge.  Unfortunately, the wisest person
for your situation is probably yourself.  You’re going to feel pretty lost
(that’s ok, you are) but you should probably just follow your gut most of the
time and see where that takes you.  Trying to integrate advice from lots of
generic advisors invariably leads to mediocrity, which is death in early stage.&lt;/p&gt;
&lt;p&gt;Given that, I encourage you to read and then discount my advice below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="on-hiring"&gt;
&lt;h2&gt;On Hiring&lt;/h2&gt;
&lt;section id="hire-experienced-folks"&gt;
&lt;h3&gt;Hire Experienced Folks&lt;/h3&gt;
&lt;p&gt;You should certainly employ folks though, and you should listen to them.
They should all be smart; ideally smarter than you.&lt;/p&gt;
&lt;p&gt;You don’t want any interns or junior folks.  No one on your team has time to
grow them.  You’d be doing them a disservice; early stage startups
are a horrible place to start a career.  Junior folks need structure.  You want
people who are smarter than you.&lt;/p&gt;
&lt;p&gt;You’ve succeeded in finding someone when you can say “Oh, so-and-so has that
problem, I don’t need to think about it anymore.”&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hire-nimble-folks"&gt;
&lt;h3&gt;Hire Nimble Folks&lt;/h3&gt;
&lt;p&gt;So hire experienced people, hire people with opinions, but avoid people who have a plan.
Your first ten plans will fail.  You need people who can acknowledge failure
quickly and move on.&lt;/p&gt;
&lt;p&gt;Some experienced people make a living by going into early companies and running
a well-known playbook.  This will be great for a month and then it will be
wrong, but these people won’t want to deviate from their playbook that
frequently.  These playbooks will sound enticing; they allow you to offload
responsibility for a time to an expert.  This is a lie though, you’re still on
the hook.&lt;/p&gt;
&lt;p&gt;You want people who are intellectually excited about pivoting once a month.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hire-independent-folks"&gt;
&lt;h3&gt;Hire Independent Folks&lt;/h3&gt;
&lt;p&gt;Some people want to be told what to do.  They’ll ask questions like “OK, what
are my goals for the quarter”.  These people are used to much more structure
than you’ll be ready to give to them.&lt;/p&gt;
&lt;p&gt;You want to hire people who can look at the entire situation and can come up
with and change their own goals after chatting casually with you.
You can’t be guiding them the entire time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hire-small"&gt;
&lt;h3&gt;Hire Small&lt;/h3&gt;
&lt;p&gt;A team of five gets along well together.
A team of thirty has a variety of issues:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;personality conflicts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;differences in culture&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;they can’t all fit in a room&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;they need management structure (and will then start to care about titles
and hierarchy and such)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before long you’ll find that instead of solving important problems you’re
spending all of your time managing a group of people.&lt;/p&gt;
&lt;p&gt;Given that you’re going to fail ten times before you find the right path, it’s
best to keep the team pretty small.  They won’t go as far, but it’ll be way
easier to bring everyone along as you explore the space.&lt;/p&gt;
&lt;p&gt;It’s like walking down the street with friends.  Two people can walk pretty
quickly even around obstacles, but thirty people walk really slowly and get
bogged down when unexpected obstructions occur.  It’s just hard to redirect the
group of thirty without &lt;em&gt;a lot&lt;/em&gt; of emotional work.&lt;/p&gt;
&lt;p&gt;Stay small until you have actual revenue that you think you can scale.
Staying small will also enable you to pay for really good people.
One really good person is worth more than five ok people, which are worth
infinitely more than fifty junior people.&lt;/p&gt;
&lt;p&gt;You individually are probably faster than fifty junior people.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hire-consistent-culture"&gt;
&lt;h3&gt;Hire Consistent Culture&lt;/h3&gt;
&lt;p&gt;Do you care mostly about …&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Making money?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changing the world?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building the best working culture?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pick one.&lt;/p&gt;
&lt;p&gt;Then make sure that everyone with hiring authority on the early team picks the same one.
Otherwise you’ll have to fire a bunch of people down the road.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="fire-people"&gt;
&lt;h3&gt;Fire People&lt;/h3&gt;
&lt;p&gt;This is a hard lesson to learn, but you’ll know that you’ll need to fire
someone, and then you’ll try for a few more months to make it work.  This will
be bad for everyone and so very bad for the company.&lt;/p&gt;
&lt;p&gt;Fire early.  It’ll suck, but everyone (including the firee) will be better
afterwards.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="investors"&gt;
&lt;h2&gt;Investors&lt;/h2&gt;
&lt;section id="take-the-money"&gt;
&lt;h3&gt;Take the Money&lt;/h3&gt;
&lt;p&gt;Investors may be offering you more money than you need.  That’s ok.
Take the money.  Money is useful.  It can be turned into good people, time to
relax and regroup, experimentation, offloading dumb problems onto contractors,
firing troublesome customers, etc..
Don’t worry about being overvalued.  Don’t worry about overly high expectations.
Just take the money.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="vcs-primary-value-is-money"&gt;
&lt;h3&gt;VCs primary value is money&lt;/h3&gt;
&lt;p&gt;VCs are smart, but they’re also diffuse and thinking about many companies at
once.  They’re good to talk to to get broad perspective and also to make
introductions, but their primary value is the money that they bring.  Their
operating experts are smart, but they don’t know your business well as well as
you do and so you shouldn’t depend on them to solve your problems.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="choose-people-who-understand-your-space"&gt;
&lt;h3&gt;Choose people who understand your space&lt;/h3&gt;
&lt;p&gt;Even though they won’t be able to help you, it’s really nice to have people who
understand what you’re doing so that you don’t have to explain everything to
them.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="authenticity-and-mental-health"&gt;
&lt;h2&gt;Authenticity and Mental Health&lt;/h2&gt;
&lt;section id="there-s-no-recipe-to-being-a-ceo"&gt;
&lt;h3&gt;There’s no recipe to being a CEO&lt;/h3&gt;
&lt;p&gt;Often folks feel stressed because they feel like they often need to behave in a
certain way:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You must have a clear and inspiring vision several years into the future&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You must know exactly how to execute on that vision&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You must present optimism to the team and to the world of your irrefutable
success&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Screw that.  No sane person has that much foresight/confidence.  Most startups
fail, including probably yours.  This is the sort of unreasonably high
expectations that lead to burnout for you and corrosive behavior to the team.&lt;/p&gt;
&lt;p&gt;You’re a human, and you’ve been a pretty successful human up until this point.
You should probably keep doing whatever it was were doing before.  There’s no
reason to completely change your behavior.  Instead, change the company to suit you.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="optimize-for-yourself"&gt;
&lt;h3&gt;Optimize for yourself&lt;/h3&gt;
&lt;p&gt;If you’re successful then you’re going to be the bottleneck of your company.
It’s ok if you optimize for yourself.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Hate Slack?  Push the company to mailing lists and Github.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hate regularly scheduled meetings?  Push for asynchronous communication and ad-hoc meetings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to take some time off?  Define a vacation policy that suits your needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to go to the beach?  Schedule the next offsite near the water.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’re being selfish and that’s ok.  It’s also probably what’s best for the company.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="voice"&gt;
&lt;h2&gt;Voice&lt;/h2&gt;
&lt;section id="branding"&gt;
&lt;h3&gt;Branding&lt;/h3&gt;
&lt;p&gt;Hire a group for this.  Your investors will have contacts.  Pay those
contractors well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="messaging"&gt;
&lt;h3&gt;Messaging&lt;/h3&gt;
&lt;p&gt;Do this yourself.  You can find people to do this for you, but you’ll spend a
bunch of your time and energy explaining things to them, having them translate
your words poorly to a lower common denominator, and then spend a bunch more
time and energy struggling to make those words right.&lt;/p&gt;
&lt;p&gt;It’s easier and better if you do this yourself for a while, and learn whatever
you need along the way.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="competition"&gt;
&lt;h2&gt;Competition&lt;/h2&gt;
&lt;p&gt;You are your biggest competitor.  You’re likely to slow yourself down far more
than any other entity.&lt;/p&gt;
&lt;section id="early-competitors-pivot-quickly"&gt;
&lt;h3&gt;Early competitors pivot quickly&lt;/h3&gt;
&lt;p&gt;Early stage companies shift a lot.  It’s likely that who you perceive to be
your biggest competitor will shift considerably every few months.  This is
because both you and they will be pivoting rapidly.&lt;/p&gt;
&lt;p&gt;Given this, you shouldn’t optimize around them too much.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="you-re-a-small-slice-of-a-growing-pie"&gt;
&lt;h3&gt;You’re a small slice of a growing pie&lt;/h3&gt;
&lt;p&gt;Activity in a space is good.  Conversation is good.
It’s sometimes harder to convince people to care about a problem than it is to
convince them that your solution solves this problem well.  Competition helps
here.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="scale"&gt;
&lt;h2&gt;Scale&lt;/h2&gt;
&lt;p&gt;A common refrain we hear is “but this won’t scale”.  This applies to early
sales contracts, product ideas, technology choices, and so on.  It’s ok.
Your first job is to build something, not to build something scalable.
&lt;em&gt;Eventually&lt;/em&gt; the thing will need to scale, but you don’t need to do that yet.&lt;/p&gt;
&lt;p&gt;Example: Tesla started with the Roadster, a fully electric sports car that cost
$250,000.  About 2,500 were ever made.  This product didn’t scale.  The
market of people willing to pay that much for a car is small, and the
manufacturing process wasn’t smooth.  It didn’t matter though, it allowed the
company to experiment and iterate quickly so that they could then produce the
Model 3 and think about scaling issues.&lt;/p&gt;
&lt;p&gt;It’s ok to start out by just building the Roadster.
First build a thing, then build a thing that scales.
Building a thing that scales right from the start reduces your chance of eventual success.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/startups/best-practices/" rel="alternate"/>
    <summary>After building a successful open source project I then started a company and made many mistakes.</summary>
    <published>2022-09-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/startups/failure/</id>
    <title>Failure</title>
    <updated>2022-09-05T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="failure"&gt;

&lt;p&gt;Most startups fail, and yet most CEOs project inevitable success.  What gives?&lt;/p&gt;
&lt;p&gt;I can explain this in one of two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Most CEOs are crazy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most CEOs are lying&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s probably a little bit of both.  CEOs have had some success and expect it
to continue.  CEOs are also strongly pressured to convey enthusiasm, both to
the world and to their employees, even if slightly dishonest.&lt;/p&gt;
&lt;p&gt;This isn’t necessarily bad.
People prefer working in a context of promised success.
Failure and uncertainty are really hard to deal with psychologically.&lt;/p&gt;
&lt;section id="psychological-cost-of-uncertainty"&gt;
&lt;h2&gt;Psychological cost of uncertainty&lt;/h2&gt;
&lt;p&gt;There is a psychological cost to uncertainty or possible failure that someone
in the organization has to pay.  Either it’s …&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;The CEO, who swallows that uncertainty, spins it, and lies a little bit to
the team, telling everyone that everything will be ok.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The team, who accept that their work may fail and deal with it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="personal-choice"&gt;
&lt;h2&gt;Personal Choice&lt;/h2&gt;
&lt;p&gt;I try to be an honest person.  This isn’t due to any kind of ethics; I just
find dishonesty to be emotionally very stressful.  I live a better life when I
don’t hold anything back.&lt;/p&gt;
&lt;p&gt;This often has negative consequences,
but overall it filters for colleagues who have a frank and realistic view of the world,
which I appreciate.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/startups/failure/" rel="alternate"/>
    <summary>Most startups fail, and yet most CEOs project inevitable success.  What gives?</summary>
    <published>2022-09-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/startups/offsites/</id>
    <title>Offsites</title>
    <updated>2022-09-12T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="offsites"&gt;

&lt;p&gt;I love remote work, but sometimes it sucks.  Offsites can help.&lt;/p&gt;
&lt;section id="motivation"&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Remote work empowers people to shape their work to fit their life.
It also lets people focus on important work for long periods of time.
Remote work is great for individual productivity,
but makes iterating with colleagues expensive.&lt;/p&gt;
&lt;p&gt;Slack and Zoom are useful for keeping up with colleagues,
but not great at helping teams work through challenging problems,
either technical or social.
Over time remote teams accrue some alignment debt and interpersonal friction.
Offsites are useful at rapidly paying down that debt,
and aligning the team so that everyone can go off again and work remotely
without expensive coordination.&lt;/p&gt;
&lt;p&gt;The rest of this article discusses how I’ve been running offsites.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="small-groups"&gt;
&lt;h2&gt;Small Groups&lt;/h2&gt;
&lt;p&gt;I like groups of 5-10 people.
Larger than that and logistics become hard,
meetings become over-voiced,
and people break up into cliques anyway.&lt;/p&gt;
&lt;p&gt;Smaller groups can also assemble far more rapidly,
allowing you to use offsites to handle emergent issues.&lt;/p&gt;
&lt;p&gt;Ideally, offsites are also an opportunity to bring people together from
different teams.  I personally prefer mission-based offsites rather than
team-based offsites.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="mission"&gt;
&lt;h2&gt;Mission&lt;/h2&gt;
&lt;p&gt;It’s useful for an offsite to have a specific goal that can be solved.&lt;/p&gt;
&lt;p&gt;Ideally this is something that everyone present immediately recognizes as a
pain in their side.  This also has to be something that can be resolved either
at the offsite or shortly after the offsite without requiring significant coordination.
It’s powerful to have the group leave with a sense of accomplishment.&lt;/p&gt;
&lt;p&gt;Even if the primary goal of the offsite is to align the team emotionally and
reduce inter-personal friction I find that having a mission/goal is helpful.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="small-teams-and-rapid-iteration"&gt;
&lt;h2&gt;Small Teams and Rapid Iteration&lt;/h2&gt;
&lt;p&gt;When solving a difficult problem I expect to fail a few times.
That’s ok, failing is good for learning, and once you’ve learned it’s often the
case that you can find a 10x faster solution to the same problem.&lt;/p&gt;
&lt;p&gt;Because of this, I tend to avoid pre-structured agendas and large team meetings.
Those assume that I know what I’m doing, and I don’t.
Instead, for me offsites are about getting a group of smart people
to iterate quickly on a larger topic.
Tactically, I do this with the following process:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Get together as a large group for 20 minutes for a broad conversation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on that conversation break up the group into smaller
teams (or individuals) to work for a couple of hours on some component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Congregate and share what happened.  The team assesses the work, identifies
issues, and then we redirect efforts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repeat at least twice a day&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With a few teams and a few days this allows us to iterate through 10-20 stages
of a larger objective during the offsite, which I’ve found has good success.&lt;/p&gt;
&lt;p&gt;There are two anti-patterns that naturally evolve that we need to call out
explicitly and work against&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Large group conversations during work periods&lt;/p&gt;
&lt;p&gt;People naturally congregate into larger and larger groups.  They feel
productive listening in on a large conversation, but this means that
they’re only exploring one thread rather than several.  I like letting
these go on for a little bit (10-30 minutes) but then breaking people up
again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Large multi-session efforts&lt;/p&gt;
&lt;p&gt;Often we find large and important problems and want to tackle them right away.
However these problems can easily dominate part of the team for the entire
offsite, and this work can often be done separately at home.&lt;/p&gt;
&lt;p&gt;Offsites are great to identify and align on larger work threads.
Then when we go home we all know what we should work on independently.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="break"&gt;
&lt;h2&gt;Break&lt;/h2&gt;
&lt;p&gt;It’s a normal workday.  People should get in around 9-10am and be done around
5-6pm.  Then they get to socialize more.  It’s totally ok to not be working all
the time.  There’s a lot of value in all of the various breaks.  I don’t think
the offsite should be just about breaks / emotional bonding, but a healthy mix
is good.&lt;/p&gt;
&lt;p&gt;Buy nice food and beer and wine.  Everything is free relative to employee time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="beautiful-venue"&gt;
&lt;h2&gt;Beautiful Venue&lt;/h2&gt;
&lt;p&gt;The team is undergoing hardship to travel to a remote location.  It’s the
company’s responsibility to provide a beautiful and engaging venue to
compensate for the difficulty.&lt;/p&gt;
&lt;p&gt;I prefer large organic spaces, like renting out a large house by a lake or ocean.
This provides a more familial rather than professional ambiance, which I
prefer.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solicit-ideas-ahead-of-time"&gt;
&lt;h2&gt;Solicit Ideas Ahead of Time&lt;/h2&gt;
&lt;p&gt;People will want to voice concerns that they have on a topic.  Ideally they can
voice these concerns asynchronously ahead of time, such as on a shared Google
Document.  This probably makes sense to send out a week ahead of time.  Often
people will forget about this document and so it’s important to trigger
communication again before landing.&lt;/p&gt;
&lt;p&gt;People need to voice their experiences and opinions.  It’s better that they do
so asynchronously (cheap) rather than in a large group in-person meeting
(expensive).  These are often important conversations, but they can dominate
the entire offsite if there isn’t some work done ahead of time.&lt;/p&gt;
&lt;p&gt;These ideas can also be sourced from the entire company, rather than just from
the group that is attending.  Ideally as much conversation happens on this doc
as possible ahead of the event.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="schedule"&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;p&gt;Typically people fly in one day, we have a dinner that day for people who
arrive early enough.  Then folks work for two full days, and then the
following morning allowing people to fly off that afternoon (or stay the extra
day in the beautiful location).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="invite-visitors"&gt;
&lt;h2&gt;Invite Visitors&lt;/h2&gt;
&lt;p&gt;Investors or collaborators in the area may want to join for a time.  I’d
encourage you to start the first day with just the team, but adding people over
time can be energizing.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/startups/offsites/" rel="alternate"/>
    <summary>I love remote work, but sometimes it sucks.  Offsites can help.</summary>
    <published>2022-09-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/startups/meetings/</id>
    <title>Meetings</title>
    <updated>2022-12-02T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="meetings"&gt;

&lt;p&gt;I cancelled all my regular meetings and logged off of Slack.  It has made a
huge difference.&lt;/p&gt;
&lt;p&gt;This article goes into why and how I made this change as well as the results on
my mental health and performance at the company.&lt;/p&gt;
&lt;section id="before-state"&gt;
&lt;h2&gt;Before State&lt;/h2&gt;
&lt;p&gt;Before this change I had accrued lots of regular meetings (1-1, team
standups, all-hands, board meetings, customer check-ins).  These filled about
half of my calendar before anything new was scheduled in a week.  I don’t
get energy from routine inter-personal interactions, and so this load was
enough to exhaust me.  This caused two problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;I didn’t have any energy for additional thinking / work&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I thought that I was doing my job&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I learned that it’s easy to spend energy on a normal activity,
think “I’m doing my job”, and be completely wrong.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-happened"&gt;
&lt;h2&gt;What Happened&lt;/h2&gt;
&lt;p&gt;So I cancelled everything on my calendar (1-1s, standups, all-hands, board
meetings) but still encouraged others to meet if they found it valuable.&lt;/p&gt;
&lt;p&gt;At first I was able to relax and recover a bit.  As I recovered I developed
more curiosity about the company and engaged much more deeply.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I used our product more&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I spoke with customers more&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I spoke with people doing interesting work in the company and found out what they needed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I engaged in more design work&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I travelled more and connected directly with people&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I wrote more, did more experiments, and published them&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My calendar is now full of meetings again.  But these meetings are meetings
that I choose week-by-week to push forward what I’m working on.&lt;/p&gt;
&lt;p&gt;Here is my calendar for next week.  It’s a blank slate:&lt;/p&gt;
&lt;img alt="../_images/calendar-empty.png" src="../_images/calendar-empty.png" style="width: 100%;" /&gt;
&lt;p&gt;And my calendar for this last week (I write this on Friday).  It’s full:&lt;/p&gt;
&lt;img alt="../_images/calendar-full.png" src="../_images/calendar-full.png" style="width: 100%;" /&gt;
&lt;p&gt;I still &lt;em&gt;meet with people&lt;/em&gt; but now these meetings are important.
By Friday next week I expect my calendar for next week (first image) to be just as full as my
calendar for this week (second image).&lt;/p&gt;
&lt;p&gt;These meetings are exciting rather than draining because they’re all
&lt;em&gt;important&lt;/em&gt; for endeavors that I’m pushing forward right now.
At the end of every week I look back and think
“Wow, I’ve made a real impact and pointed things more in the right direction”.
I’m energized by impact, and feel much better about my work.&lt;/p&gt;
&lt;p&gt;I learned that I love working together with people.
I hate meeting with them just to meet.
I’m driven by purpose rather than routine.  I suspect that many of us are.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="in-person-meetings"&gt;
&lt;h2&gt;In-Person Meetings&lt;/h2&gt;
&lt;p&gt;I also prioritize spending time with people in person more.  This includes
offsites, conferences, and generally making time when we’re in the same area.&lt;/p&gt;
&lt;p&gt;In particular …&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;We’ve been doing way more &lt;a class="reference internal" href="../startups/offsites/#offsites"&gt;&lt;span class="std std-ref"&gt;team offsites&lt;/span&gt;&lt;/a&gt; in the company.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While I’ve cancelled regular board meetings I’ve spent much more time in
person with investors and we all feel way more aligned (they’re on board
with this approach)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Leadership meets pretty frequently at conferences and offsites&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="zooming-out"&gt;
&lt;h2&gt;Zooming Out&lt;/h2&gt;
&lt;p&gt;This experience taught me to question how I work.&lt;/p&gt;
&lt;p&gt;Before, I spent my day in regular meetings because that’s how people say you
should run a business.  After I changed successfully I learned to trust common
practice less, and trust my own judgment more.  Maybe this was the way
&lt;em&gt;most&lt;/em&gt; people work, maybe it was even an &lt;em&gt;effective&lt;/em&gt; way for most people, but it
certainly wasn’t an effective way for &lt;em&gt;me&lt;/em&gt; to work.&lt;/p&gt;
&lt;p&gt;After realizing the potential for improvement over common practice, I felt free
to reinvent how I work in a way that is best for me.  I encourage others to
brutally assess how they work today, realize how much control they have, and
begin experimenting heavily.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/startups/meetings/" rel="alternate"/>
    <summary>I cancelled all my regular meetings and logged off of Slack.  It has made a
huge difference.</summary>
    <published>2022-12-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/engineering/stability-bias/</id>
    <title>Stability Bias</title>
    <updated>2022-12-02T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="stability-bias"&gt;

&lt;p&gt;We often optimize more for current users than future users.&lt;/p&gt;
&lt;p&gt;Stability often arises as a concern when proposing changes.  I often hear
statements like the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;We’re seeing some performance regressions so we shouldn’t release&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;We shouldn’t include this breaking API change because it might confuse existing users&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;We can’t remove that feature because it’s used by group X&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These statements are common in managing software and are often used to motivate
not deviating from the stable norm.  However, they discount the benefits of
moving forward.  One might respond as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Concern:&lt;/strong&gt; &lt;em&gt;We’re seeing some performance regressions so we shouldn’t release&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; We’re also seeing many more performance enhancements.
By not releasing we’re accepting regressions in reverse.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Concern:&lt;/strong&gt; &lt;em&gt;We shouldn’t include this breaking API change because it might confuse existing users&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; But this API is confusing as it is.
By not making this change we’re making things confusing for new and future
users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Concern:&lt;/strong&gt; &lt;em&gt;We can’t remove that feature because it’s used by group X&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; But that feature slows down all of our development.
By not removing it we’re rejecting the improvements we could make by being
more efficient and nimble.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Making these decisions often comes down to determining the ratio of current to
future users you have, and how much you value future users.&lt;/p&gt;
&lt;section id="valuing-future-users"&gt;
&lt;h2&gt;Valuing Future Users&lt;/h2&gt;
&lt;p&gt;Most design decisions include some trade-off.  Mostly I want people to weigh
and value future users when making these calculations.  This isn’t easy or
natural to do.&lt;/p&gt;
&lt;p&gt;Stability mindsets mostly value current users.  This is a common mindset
because we get much of our perspective from current users.  Future users don’t
have much of a voice.&lt;/p&gt;
&lt;p&gt;This is common in tech, but also in government, public
policy, etc..  Imagine if future generations could vote today on climate
change policy, or future residents of a city could vote on high
density residential zoning laws.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="evolve-into-stability"&gt;
&lt;h2&gt;Evolve Into Stability&lt;/h2&gt;
&lt;p&gt;Stability does have inherent value though.  Being the project that existing
users can rely on long-term is useful.  My sense is that most project should
start off with a strong bias towards dynamism and having broad impact,
especially when the current user count is far smaller than the potential user
count.  And then, as the project becomes more adopted, it should crystallize
and become more stable.&lt;/p&gt;
&lt;p&gt;If your project is young and has captured only a small fraction of the
possible userbase then I think that one should embrace dynamism and rapid
evolution over stability.  This will, over time, improve overall user
satisfaction.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/engineering/stability-bias/" rel="alternate"/>
    <summary>We often optimize more for current users than future users.</summary>
    <published>2022-12-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/writing/audio-visual/</id>
    <title>Audio-Visual Setup</title>
    <updated>2022-12-18T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="audio-visual-setup"&gt;

&lt;p&gt;&lt;em&gt;HD is the new tall&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;How we present ourselves has unreasonable effectiveness on how our message is perceived.  Aesthetic qualities can, unfairly, be translated into a greater sense of authority.&lt;/p&gt;
&lt;p&gt;In the era of Zoom meetings, one way to do this is with an excellent AV setup.
This document goes through my setup at home.  I got this information from a
professional interviewer, and tweaked things to my liking.&lt;/p&gt;
&lt;p&gt;One of our investors saw the setup and made the quip “Oh, HD is the new tall” which I quite liked.  Tall people have an unfair advantage when it comes to perceived authority.  HD is like that, but anyone with around $2000 and a day’s time to set everything up can achieve it.&lt;/p&gt;
&lt;img alt="https://lh3.googleusercontent.com/pw/AL9nZEXNWAQEN8auF4Y1OSC-7XZ9sM-sd39AisUDl9sH3c7UEsHAR3nWmdMI7xvwDCsdtd89ox-4mQMiDQMOz_ezwpMhhkpor8KiujbkHSJdKY_9rVzJyDHwom3snXzxfX2Vx94CHLR4E0C0PUANGRd2N964=w3024-h1702-no?authuser=0" src="https://lh3.googleusercontent.com/pw/AL9nZEXNWAQEN8auF4Y1OSC-7XZ9sM-sd39AisUDl9sH3c7UEsHAR3nWmdMI7xvwDCsdtd89ox-4mQMiDQMOz_ezwpMhhkpor8KiujbkHSJdKY_9rVzJyDHwom3snXzxfX2Vx94CHLR4E0C0PUANGRd2N964=w3024-h1702-no?authuser=0" /&gt;
&lt;section id="camera"&gt;
&lt;h2&gt;Camera&lt;/h2&gt;
&lt;p&gt;I use a mirrorless camera with zoom and real-time auto-focus.  These tend to
cost about $1000.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B07MV3P7M8/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;th=1"&gt;Sony Alpha a6400&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need a bunch of peripherals to make this work:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B0744JGWQR/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;psc=1"&gt;A charger&lt;/a&gt;
so that you don’t have to deal with batteries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B07K3FN5MR/ref=ppx_yo_dt_b_asin_title_o07_s02?ie=UTF8&amp;amp;th=1"&gt;Elgato Cam Link 4K&lt;/a&gt; an external capture card, which effectively mounts the HDMI connection as a webcam to your computer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B08C2PVP7J/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&amp;amp;th=1"&gt;The appropriate HDMI cable&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B005KP473Q/ref=ppx_yo_dt_b_asin_title_o07_s00?ie=UTF8&amp;amp;psc=1"&gt;A simple tripod&lt;/a&gt; to mount the camera&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And optionally, &lt;a class="reference external" href="https://www.amazon.com/gp/product/B08LP5QYW8/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;th=1"&gt;a remote&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This setup is identified as a normal webcam by your computer, can run continuously throughout the day, can zoom in tightly on your face, and looks great.  I frequently get asked after calls “What is your AV setup?  You look awesome”&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lights"&gt;
&lt;h2&gt;Lights&lt;/h2&gt;
&lt;p&gt;Only half of that is the camera though.  Lighting is as-if-not-more important.  I often see HD camera setups with horrible lighting and it looks worse than a normal Macbook pro camera.&lt;/p&gt;
&lt;p&gt;Ideally, you can set things up so that you have beautiful natural light.  Assuming that’s hard (it’s hard for me) you need good lights.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B07ZCYMS3V/ref=ppx_yo_dt_b_asin_title_o07_s01?ie=UTF8&amp;amp;psc=1"&gt;Good lights&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use these.  They’re about $200.  They’re plenty bright, come with good stable tripods that can adjust to any height, and have adaptable coloring.  I use a master-slave orientation for them and tune the brightness up or down on one in order to control both.&lt;/p&gt;
&lt;p&gt;Again, don’t bother with a nice camera if you don’t also have good lighting&lt;/p&gt;
&lt;/section&gt;
&lt;section id="sound"&gt;
&lt;h2&gt;Sound&lt;/h2&gt;
&lt;p&gt;I use the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B08G7RG9ML/ref=ppx_yo_dt_b_asin_title_o06_s00?ie=UTF8&amp;amp;th=1"&gt;Shure MV7&lt;/a&gt; a solid recording microphone, similar to what professional podcasters use&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B07X1ZWS2H/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&amp;amp;th=1"&gt;Suspension Boom arm stand&lt;/a&gt; to position the mic right up against my mouth&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sound coming out of this feels impressive.&lt;/p&gt;
&lt;p&gt;Typically I bring the mic pretty close up to my face, and then zoom the camera in so that the microphone is just out of frame.  This makes me sound good but without the distracting podcast-like setup that some people prefer.&lt;/p&gt;
&lt;p&gt;Also, this microphone has good enough sound isolation that I don’t have to bother with headphones.  I just use the speaker within my MacMini and this mic doesn’t pick up the echo at all.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="green-screen"&gt;
&lt;h2&gt;Green Screen&lt;/h2&gt;
&lt;p&gt;When I do screen recordings I like to have my body super-imposed directly on top of my screen.  I do this with a green screen.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/gp/product/B07DWTGLPM/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;psc=1"&gt;Green Screen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This one folds up nicely so I leave it by my desk 99% of the time.  When I want it I can set it up in less than a minute.  It has nice fold-out feet for stability and comes up high enough to cover me (I’m tall).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="recording-software"&gt;
&lt;h2&gt;Recording Software&lt;/h2&gt;
&lt;p&gt;When in live meetings I use Zoom or whatever.&lt;/p&gt;
&lt;p&gt;When doing screen recordings I use &lt;a class="reference external" href="https://obsproject.com/"&gt;Open Broadcaster Software (OBS)&lt;/a&gt;.  It takes about half-a-day to configure everything.  In particular I needed to set the following up:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Add in the right microphone and camera settings&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the right delay to the microphone (about 300ms)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a chroma-key filter for the greenscreen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whatever output settings to get appropriately HD video without overwhelming things&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/writing/audio-visual/" rel="alternate"/>
    <summary>HD is the new tall</summary>
    <published>2022-12-18T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://matthewrocklin.com/startups/think/</id>
    <title>Think for yourself</title>
    <updated>2022-12-26T00:00:00+00:00</updated>
    <author>
      <name>Matthew Rocklin</name>
    </author>
    <content type="html">&lt;section id="think-for-yourself"&gt;

&lt;p&gt;&lt;em&gt;No one knows how to do your job.  Look for answers from within, not without.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In highly dynamic environments (tech, startups, zombie apocalypse) there is no
historical set of rules that “just work”.  Your best bet is to question
everything, apply rational thought, and course correct shamelessly.&lt;/p&gt;
&lt;section id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;If you don’t feel like an imposter then you’re not trying hard enough&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I’m placed into a new role I feel lost.  I search around for a set of
common practices that I can lean on and at least pretend I know what I’m doing.
Typically I do a lot of web searches, read many articles, and reach out to
people who have done this job before to get their advice.  Learning to do new
things is hard.  I feel a lot of responsibility and a lot of stress when I
don’t know how to do my job.&lt;/p&gt;
&lt;p&gt;If you’re growing as a person then you maybe find yourself in this situation
too.  The more quickly you grow, the more frequently you find yourself unsure
of how to act.  It makes sense to research and ask for advice, but my
experience is that you shouldn’t weigh historical advice too heavily.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="advice-is-often-wrong"&gt;
&lt;h2&gt;Advice is often wrong&lt;/h2&gt;
&lt;p&gt;&lt;i&gt;&lt;s&gt;Trust me, I’ve done this before and know what I’m doing&lt;/s&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Wisdom learned years ago may not transfer well to today, especially in highly
dynamic environments (tech, startups, zombie apocalypse).&lt;/p&gt;
&lt;p&gt;This is bad, because people can’t help you as much as you would want.&lt;/p&gt;
&lt;p&gt;This is also good, because it frees you to trust your gut and think more.
Knowing that there isn’t a well-troden path gives you permission to blaze your
own trail without hesitation.&lt;/p&gt;
&lt;p&gt;Said differently, you’re suffering imposter syndrome. That’s appropriate.  You
are under-qualified and you don’t know how to do your job.  However, neither
does anyone else!  Your job is new!  No one has ever done what you’re tasked
with in your current environment.  You might as well do the best you can,
knowing that no else is likely to do a better job.&lt;/p&gt;
&lt;p&gt;Knowing that others are wrong can remove paralysis and free you to think
more clearly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="observe-think-change"&gt;
&lt;h2&gt;Observe, Think, Change&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You’re smart.  You have a brain.  Use it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Instead, question your situation, make a rational decision, and start moving
forward.  Assess frequently, own to being wrong, and course correct
shamelessly.&lt;/p&gt;
&lt;p&gt;This is hard work!  This is also your job.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://matthewrocklin.com/startups/think/" rel="alternate"/>
    <summary>No one knows how to do your job.  Look for answers from within, not without.</summary>
    <published>2022-12-26T00:00:00+00:00</published>
  </entry>
</feed>
